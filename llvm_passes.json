{
    "Analysis": {
        "AAEvalLegacyPass": {
            "command": "-aa-eval",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                }
            },
            "description": "Exhaustive Alias Analysis Precision Evaluator",
            "name": "AAEvalLegacyPass",
            "parameters": {
                "evaluate-aa-metadata": {
                    "command": "-evaluate-aa-metadata",
                    "type": "bool"
                },
                "print-all-alias-modref-info": {
                    "command": "-print-all-alias-modref-info",
                    "type": "bool"
                },
                "print-may-aliases": {
                    "command": "-print-may-aliases",
                    "type": "bool"
                },
                "print-mod": {
                    "command": "-print-mod",
                    "type": "bool"
                },
                "print-modref": {
                    "command": "-print-modref",
                    "type": "bool"
                },
                "print-must": {
                    "command": "-print-must",
                    "type": "bool"
                },
                "print-must-aliases": {
                    "command": "-print-must-aliases",
                    "type": "bool"
                },
                "print-mustmod": {
                    "command": "-print-mustmod",
                    "type": "bool"
                },
                "print-mustmodref": {
                    "command": "-print-mustmodref",
                    "type": "bool"
                },
                "print-mustref": {
                    "command": "-print-mustref",
                    "type": "bool"
                },
                "print-no-aliases": {
                    "command": "-print-no-aliases",
                    "type": "bool"
                },
                "print-no-modref": {
                    "command": "-print-no-modref",
                    "type": "bool"
                },
                "print-partial-aliases": {
                    "command": "-print-partial-aliases",
                    "type": "bool"
                },
                "print-ref": {
                    "command": "-print-ref",
                    "type": "bool"
                }
            }
        },
        "AliasSetPrinter": {
            "command": "-print-alias-sets",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                }
            },
            "description": "Alias Set Printer",
            "name": "AliasSetPrinter",
            "parameters": {
                "alias-set-saturation-threshold": {
                    "command": "-alias-set-saturation-threshold",
                    "initial_value": "250",
                    "type": "unsigned"
                }
            }
        },
        "AssumptionCacheTracker": {
            "command": "-assumption-cache-tracker",
            "dependencies": {},
            "description": "Assumption Cache Tracker",
            "name": "AssumptionCacheTracker",
            "parameters": {
                "verify-assumption-cache": {
                    "command": "-verify-assumption-cache",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "BasicAAWrapperPass": {
            "command": "-basicaa",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Basic Alias Analysis (stateless AA impl)",
            "name": "BasicAAWrapperPass",
            "parameters": {
                "basicaa-double-calc-bits": {
                    "command": "-basicaa-double-calc-bits",
                    "initial_value": "false",
                    "type": "bool"
                },
                "basicaa-force-at-least-64b": {
                    "command": "-basicaa-force-at-least-64b",
                    "initial_value": "true",
                    "type": "bool"
                },
                "basicaa-recphi": {
                    "command": "-basicaa-recphi",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "BlockFrequencyInfoImpl": {
            "command": "-block-freq",
            "dependencies": {},
            "description": "",
            "name": "BlockFrequencyInfoImpl",
            "parameters": {}
        },
        "BlockFrequencyInfoWrapperPass": {
            "command": "-block-freq",
            "dependencies": {
                "BranchProbabilityInfoWrapperPass": {
                    "name": "BranchProbabilityInfoWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                }
            },
            "description": "Block Frequency Analysis",
            "name": "BlockFrequencyInfoWrapperPass",
            "parameters": {
                "print-bfi": {
                    "command": "-print-bfi",
                    "initial_value": "false",
                    "type": "bool"
                },
                "view-block-freq-propagation-dags": {
                    "command": "-view-block-freq-propagation-dags",
                    "type": "GVDAGType"
                }
            }
        },
        "BranchProbabilityInfoWrapperPass": {
            "command": "-branch-prob",
            "dependencies": {
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Branch Probability Analysis",
            "name": "BranchProbabilityInfoWrapperPass",
            "parameters": {
                "print-bpi": {
                    "command": "-print-bpi",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "CFGViewerLegacyPass": {
            "command": "-view-cfg",
            "dependencies": {},
            "description": "View CFG of function",
            "name": "CFGViewerLegacyPass",
            "parameters": {
                "cfg-dot-filename-prefix": {
                    "command": "-cfg-dot-filename-prefix",
                    "type": "std::string"
                },
                "cfg-func-name": {
                    "command": "-cfg-func-name",
                    "type": "std::string"
                }
            }
        },
        "CFLAndersAAWrapperPass": {
            "command": "-cfl-anders-aa",
            "dependencies": {},
            "description": "Inclusion-Based CFL Alias Analysis",
            "name": "CFLAndersAAWrapperPass",
            "parameters": {}
        },
        "CFLSteensAAWrapperPass": {
            "command": "-cfl-steens-aa",
            "dependencies": {},
            "description": "Unification-Based CFL Alias Analysis",
            "name": "CFLSteensAAWrapperPass",
            "parameters": {}
        },
        "CGSCCPassManager": {
            "command": "-cgscc",
            "dependencies": {},
            "description": "",
            "name": "CGSCCPassManager",
            "parameters": {}
        },
        "CallGraphViewer": {
            "command": "-view-callgraph",
            "dependencies": {},
            "description": "View call graph",
            "name": "CallGraphViewer",
            "parameters": {}
        },
        "CallGraphWrapperPass": {
            "command": "-basiccg",
            "dependencies": {
                "CallGraphWrapperPass": {
                    "name": "CallGraphWrapperPass"
                }
            },
            "description": "CallGraph Construction",
            "name": "CallGraphWrapperPass",
            "parameters": {}
        },
        "CodeMetrics": {
            "command": "-code-metrics",
            "dependencies": {},
            "description": "",
            "name": "CodeMetrics",
            "parameters": {}
        },
        "CostModelAnalysis": {
            "command": "-CM_NAME",
            "dependencies": {},
            "description": "cm_name",
            "name": "CostModelAnalysis",
            "parameters": {
                "cost-kind": {
                    "command": "-cost-kind",
                    "initial_value": "TargetTransformInfo::TCK_RecipThroughput",
                    "type": "TargetTransformInfo::TargetCostKind"
                }
            }
        },
        "Delinearization": {
            "command": "-DL_NAME",
            "dependencies": {
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                }
            },
            "description": "delinearization_name",
            "name": "Delinearization",
            "parameters": {}
        },
        "DemandedBitsWrapperPass": {
            "command": "-demanded-bits",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                }
            },
            "description": "Demanded bits analysis",
            "name": "DemandedBitsWrapperPass",
            "parameters": {}
        },
        "DependenceAnalysisWrapperPass": {
            "command": "-da",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "Dependence Analysis",
            "name": "DependenceAnalysisWrapperPass",
            "parameters": {
                "da-delinearize": {
                    "command": "-da-delinearize",
                    "initial_value": "true",
                    "type": "bool"
                },
                "da-disable-delinearization-checks": {
                    "command": "-da-disable-delinearization-checks",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "DivergenceAnalysis": {
            "command": "-divergence-analysis",
            "dependencies": {},
            "description": "",
            "name": "DivergenceAnalysis",
            "parameters": {}
        },
        "DomViewer": {
            "command": "-view-dom",
            "dependencies": {},
            "description": "View dominance tree of function",
            "name": "DomViewer",
            "parameters": {}
        },
        "DominanceFrontierWrapperPass": {
            "command": "-domfrontier",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                }
            },
            "description": "Dominance Frontier Construction",
            "name": "DominanceFrontierWrapperPass",
            "parameters": {}
        },
        "DummyCGSCCPass": {
            "command": "-DummyCGSCCPass",
            "dependencies": {},
            "description": "DummyCGSCCPass",
            "name": "DummyCGSCCPass",
            "parameters": {
                "max-cg-scc-iterations": {
                    "command": "-max-cg-scc-iterations",
                    "initial_value": "4",
                    "type": "unsigned"
                }
            }
        },
        "ExternalAAWrapperPass": {
            "command": "-external-aa",
            "dependencies": {
                "BasicAAWrapperPass": {
                    "name": "BasicAAWrapperPass"
                },
                "CFLAndersAAWrapperPass": {
                    "name": "CFLAndersAAWrapperPass"
                },
                "CFLSteensAAWrapperPass": {
                    "name": "CFLSteensAAWrapperPass"
                },
                "ExternalAAWrapperPass": {
                    "name": "ExternalAAWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "ObjCARCAAWrapperPass": {
                    "name": "ObjCARCAAWrapperPass"
                },
                "SCEVAAWrapperPass": {
                    "name": "SCEVAAWrapperPass"
                },
                "ScopedNoAliasAAWrapperPass": {
                    "name": "ScopedNoAliasAAWrapperPass"
                },
                "TypeBasedAAWrapperPass": {
                    "name": "TypeBasedAAWrapperPass"
                }
            },
            "description": "External Alias Analysis",
            "name": "ExternalAAWrapperPass",
            "parameters": {
                "disable-basicaa": {
                    "command": "-disable-basicaa",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "GlobalsAAWrapperPass": {
            "command": "-globals-aa",
            "dependencies": {
                "CallGraphWrapperPass": {
                    "name": "CallGraphWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Globals Alias Analysis",
            "name": "GlobalsAAWrapperPass",
            "parameters": {
                "enable-unsafe-globalsmodref-alias-results": {
                    "command": "-enable-unsafe-globalsmodref-alias-results",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "IVDescriptors": {
            "command": "-iv-descriptors",
            "dependencies": {},
            "description": "",
            "name": "IVDescriptors",
            "parameters": {}
        },
        "IVUsersWrapperPass": {
            "command": "-iv-users",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "Induction Variable Users",
            "name": "IVUsersWrapperPass",
            "parameters": {}
        },
        "IndirectCallPromotionAnalysis": {
            "command": "-pgo-icall-prom-analysis",
            "dependencies": {},
            "description": "",
            "name": "IndirectCallPromotionAnalysis",
            "parameters": {
                "icp-max-prom": {
                    "command": "-icp-max-prom",
                    "initial_value": "3",
                    "type": "unsigned"
                },
                "icp-remaining-percent-threshold": {
                    "command": "-icp-remaining-percent-threshold",
                    "initial_value": "30",
                    "type": "unsigned"
                },
                "icp-total-percent-threshold": {
                    "command": "-icp-total-percent-threshold",
                    "initial_value": "5",
                    "type": "unsigned"
                }
            }
        },
        "InlineCost": {
            "command": "-inline-cost",
            "dependencies": {},
            "description": "",
            "name": "InlineCost",
            "parameters": {
                "cold-callsite-rel-freq": {
                    "command": "-cold-callsite-rel-freq",
                    "initial_value": "2",
                    "type": "int"
                },
                "hot-callsite-rel-freq": {
                    "command": "-hot-callsite-rel-freq",
                    "initial_value": "60",
                    "type": "int"
                },
                "hot-callsite-threshold": {
                    "command": "-hot-callsite-threshold",
                    "initial_value": "3000",
                    "type": "int"
                },
                "inline-cold-callsite-threshold": {
                    "command": "-inline-cold-callsite-threshold",
                    "initial_value": "45",
                    "type": "int"
                },
                "inline-cost-full": {
                    "command": "-inline-cost-full",
                    "initial_value": "false",
                    "type": "bool"
                },
                "inline-threshold": {
                    "command": "-inline-threshold",
                    "initial_value": "225",
                    "type": "int"
                },
                "inlinecold-threshold": {
                    "command": "-inlinecold-threshold",
                    "initial_value": "45",
                    "type": "int"
                },
                "inlinehint-threshold": {
                    "command": "-inlinehint-threshold",
                    "initial_value": "325",
                    "type": "int"
                },
                "locally-hot-callsite-threshold": {
                    "command": "-locally-hot-callsite-threshold",
                    "initial_value": "525",
                    "type": "int"
                }
            }
        },
        "InstCount": {
            "command": "-instcount",
            "dependencies": {},
            "description": "Counts the various types of Instructions",
            "name": "InstCount",
            "parameters": {}
        },
        "InstructionSimplify": {
            "command": "-instsimplify",
            "dependencies": {},
            "description": "",
            "name": "InstructionSimplify",
            "parameters": {}
        },
        "IntervalPartition": {
            "command": "-intervals",
            "dependencies": {},
            "description": "Interval Partition Construction",
            "name": "IntervalPartition",
            "parameters": {}
        },
        "LCSSAVerificationPass": {
            "command": "-lcssa-verification",
            "dependencies": {},
            "description": "LCSSA Verifier",
            "name": "LCSSAVerificationPass",
            "parameters": {}
        },
        "LazyBlockFrequencyInfoPass": {
            "command": "-lazy-block-freq",
            "dependencies": {
                "LazyBPIPass": {
                    "name": "LazyBPIPass"
                },
                "LazyBlockFrequencyInfoPass": {
                    "name": "LazyBlockFrequencyInfoPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                }
            },
            "description": "Lazy Block Frequency Analysis",
            "name": "LazyBlockFrequencyInfoPass",
            "parameters": {}
        },
        "LazyBranchProbabilityInfoPass": {
            "command": "-lazy-branch-prob",
            "dependencies": {
                "LazyBranchProbabilityInfoPass": {
                    "name": "LazyBranchProbabilityInfoPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Lazy Branch Probability Analysis",
            "name": "LazyBranchProbabilityInfoPass",
            "parameters": {}
        },
        "LazyCallGraph": {
            "command": "-lcg",
            "dependencies": {},
            "description": "",
            "name": "LazyCallGraph",
            "parameters": {}
        },
        "LazyValueInfoWrapperPass": {
            "command": "-lazy-value-info",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "LazyValueInfoWrapperPass": {
                    "name": "LazyValueInfoWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Lazy Value Information Analysis",
            "name": "LazyValueInfoWrapperPass",
            "parameters": {}
        },
        "LegacyDivergenceAnalysis": {
            "command": "-divergence",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                }
            },
            "description": "Legacy Divergence Analysis",
            "name": "LegacyDivergenceAnalysis",
            "parameters": {
                "use-gpu-divergence-analysis": {
                    "command": "-use-gpu-divergence-analysis",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "Lint": {
            "command": "-lint",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Statically lint-checks LLVM IR",
            "name": "Lint",
            "parameters": {}
        },
        "LoopAccessLegacyAnalysis": {
            "command": "-LAA_NAME",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "laa_name",
            "name": "LoopAccessLegacyAnalysis",
            "parameters": {
                "enable-mem-access-versioning": {
                    "command": "-enable-mem-access-versioning",
                    "initial_value": "true",
                    "type": "bool"
                },
                "force-vector-interleave": {
                    "command": "-force-vector-interleave",
                    "type": "unsigned, true"
                },
                "force-vector-width": {
                    "command": "-force-vector-width",
                    "type": "unsigned, true"
                },
                "max-dependences": {
                    "command": "-max-dependences",
                    "initial_value": "100",
                    "type": "unsigned"
                },
                "memory-check-merge-threshold": {
                    "command": "-memory-check-merge-threshold",
                    "initial_value": "100",
                    "type": "unsigned"
                },
                "runtime-memory-check-threshold": {
                    "command": "-runtime-memory-check-threshold",
                    "initial_value": "8",
                    "type": "unsigned, true"
                },
                "store-to-load-forwarding-conflict-detection": {
                    "command": "-store-to-load-forwarding-conflict-detection",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "LoopCacheAnalysis": {
            "command": "-loop-cache-cost",
            "dependencies": {},
            "description": "",
            "name": "LoopCacheAnalysis",
            "parameters": {
                "default-trip-count": {
                    "command": "-default-trip-count",
                    "initial_value": "100",
                    "type": "unsigned"
                },
                "temporal-reuse-threshold": {
                    "command": "-temporal-reuse-threshold",
                    "initial_value": "2",
                    "type": "unsigned"
                }
            }
        },
        "LoopInfoWrapperPass": {
            "command": "-loops",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                }
            },
            "description": "Natural Loop Information",
            "name": "LoopInfoWrapperPass",
            "parameters": {
                "verify-loop-info": {
                    "command": "-verify-loop-info",
                    "type": "bool, true"
                }
            }
        },
        "MemDepPrinter": {
            "command": "-print-memdeps",
            "dependencies": {
                "MemoryDependenceWrapperPass": {
                    "name": "MemoryDependenceWrapperPass"
                }
            },
            "description": "Print MemDeps of function",
            "name": "MemDepPrinter",
            "parameters": {}
        },
        "MemDerefPrinter": {
            "command": "-print-memderefs",
            "dependencies": {},
            "description": "Memory Dereferenciblity of pointers in function",
            "name": "MemDerefPrinter",
            "parameters": {}
        },
        "MemoryBuiltins": {
            "command": "-memory-builtins",
            "dependencies": {},
            "description": "",
            "name": "MemoryBuiltins",
            "parameters": {}
        },
        "MemoryDependenceWrapperPass": {
            "command": "-memdep",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "PhiValuesWrapperPass": {
                    "name": "PhiValuesWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Memory Dependence Analysis",
            "name": "MemoryDependenceWrapperPass",
            "parameters": {
                "memdep-block-number-limit": {
                    "command": "-memdep-block-number-limit",
                    "initial_value": "1000",
                    "type": "unsigned"
                },
                "memdep-block-scan-limit": {
                    "command": "-memdep-block-scan-limit",
                    "initial_value": "100",
                    "type": "unsigned"
                }
            }
        },
        "MemorySSAUpdater": {
            "command": "-memoryssa",
            "dependencies": {},
            "description": "",
            "name": "MemorySSAUpdater",
            "parameters": {}
        },
        "MemorySSAWrapperPass": {
            "command": "-memoryssa",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                }
            },
            "description": "Memory SSA",
            "name": "MemorySSAWrapperPass",
            "parameters": {
                "memssa-check-limit": {
                    "command": "-memssa-check-limit",
                    "initial_value": "100",
                    "type": "unsigned"
                },
                "verify-memoryssa": {
                    "command": "-verify-memoryssa",
                    "type": "bool, true"
                }
            }
        },
        "ModuleDebugInfoPrinter": {
            "command": "-module-debuginfo",
            "dependencies": {},
            "description": "Decodes module-level debug info",
            "name": "ModuleDebugInfoPrinter",
            "parameters": {}
        },
        "ModuleSummaryIndexWrapperPass": {
            "command": "-module-summary-analysis",
            "dependencies": {
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                }
            },
            "description": "Module Summary Analysis",
            "name": "ModuleSummaryIndexWrapperPass",
            "parameters": {}
        },
        "MustExecutePrinter": {
            "command": "-print-mustexecute",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                }
            },
            "description": "Instructions which execute on loop entry",
            "name": "MustExecutePrinter",
            "parameters": {}
        },
        "ObjCARCAAWrapperPass": {
            "command": "-objc-arc-aa",
            "dependencies": {},
            "description": "ObjC-ARC-Based Alias Analysis",
            "name": "ObjCARCAAWrapperPass",
            "parameters": {}
        },
        "OptimizationRemarkEmitterWrapperPass": {
            "command": "-ORE_NAME",
            "dependencies": {
                "LazyBFIPass": {
                    "name": "LazyBFIPass"
                }
            },
            "description": "ore_name",
            "name": "OptimizationRemarkEmitterWrapperPass",
            "parameters": {}
        },
        "PhiValuesWrapperPass": {
            "command": "-phi-values",
            "dependencies": {},
            "description": "Phi Values Analysis",
            "name": "PhiValuesWrapperPass",
            "parameters": {}
        },
        "PostDominatorTreeWrapperPass": {
            "command": "-postdomtree",
            "dependencies": {},
            "description": "Post-Dominator Tree Construction",
            "name": "PostDominatorTreeWrapperPass",
            "parameters": {}
        },
        "ProfileSummaryInfoWrapperPass": {
            "command": "-profile-summary-info",
            "dependencies": {},
            "description": "Profile summary info",
            "name": "ProfileSummaryInfoWrapperPass",
            "parameters": {
                "profile-summary-cold-count": {
                    "command": "-profile-summary-cold-count",
                    "type": "int"
                },
                "profile-summary-cutoff-cold": {
                    "command": "-profile-summary-cutoff-cold",
                    "initial_value": "999999",
                    "type": "int"
                },
                "profile-summary-cutoff-hot": {
                    "command": "-profile-summary-cutoff-hot",
                    "initial_value": "990000",
                    "type": "int"
                },
                "profile-summary-hot-count": {
                    "command": "-profile-summary-hot-count",
                    "type": "int"
                },
                "profile-summary-huge-working-set-size-threshold": {
                    "command": "-profile-summary-huge-working-set-size-threshold",
                    "initial_value": "15000",
                    "type": "unsigned"
                }
            }
        },
        "RegionInfoPass": {
            "command": "-regions",
            "dependencies": {
                "DominanceFrontierWrapperPass": {
                    "name": "DominanceFrontierWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                }
            },
            "description": "Detect single entry single exit regions",
            "name": "RegionInfoPass",
            "parameters": {
                "print-region-style": {
                    "command": "-print-region-style",
                    "type": "Region::PrintStyle, true"
                },
                "verify-region-info": {
                    "command": "-verify-region-info",
                    "type": "bool,true"
                }
            }
        },
        "RegionPass": {
            "command": "-regionpassmgr",
            "dependencies": {},
            "description": "",
            "name": "RegionPass",
            "parameters": {}
        },
        "RegionPrinter": {
            "command": "-dot-regions",
            "dependencies": {},
            "description": "Print regions of function to 'dot' file",
            "name": "RegionPrinter",
            "parameters": {
                "only-simple-regions": {
                    "command": "-only-simple-regions",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "SCEVAAWrapperPass": {
            "command": "-scev-aa",
            "dependencies": {
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "ScalarEvolution-based Alias Analysis",
            "name": "SCEVAAWrapperPass",
            "parameters": {}
        },
        "ScalarEvolutionWrapperPass": {
            "command": "-scalar-evolution",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Scalar Evolution Analysis",
            "name": "ScalarEvolutionWrapperPass",
            "parameters": {
                "scalar-evolution-huge-expr-threshold": {
                    "command": "-scalar-evolution-huge-expr-threshold",
                    "initial_value": "4096",
                    "type": "unsigned"
                },
                "scalar-evolution-max-add-rec-size": {
                    "command": "-scalar-evolution-max-add-rec-size",
                    "initial_value": "8",
                    "type": "unsigned"
                },
                "scalar-evolution-max-arith-depth": {
                    "command": "-scalar-evolution-max-arith-depth",
                    "initial_value": "32",
                    "type": "unsigned"
                },
                "scalar-evolution-max-cast-depth": {
                    "command": "-scalar-evolution-max-cast-depth",
                    "initial_value": "8",
                    "type": "unsigned"
                },
                "scalar-evolution-max-constant-evolving-depth": {
                    "command": "-scalar-evolution-max-constant-evolving-depth",
                    "initial_value": "32",
                    "type": "unsigned"
                },
                "scalar-evolution-max-iterations": {
                    "command": "-scalar-evolution-max-iterations",
                    "initial_value": "100",
                    "type": "unsigned"
                },
                "scalar-evolution-max-scev-compare-depth": {
                    "command": "-scalar-evolution-max-scev-compare-depth",
                    "initial_value": "32",
                    "type": "unsigned"
                },
                "scalar-evolution-max-scev-operations-implication-depth": {
                    "command": "-scalar-evolution-max-scev-operations-implication-depth",
                    "initial_value": "2",
                    "type": "unsigned"
                },
                "scalar-evolution-max-value-compare-depth": {
                    "command": "-scalar-evolution-max-value-compare-depth",
                    "initial_value": "2",
                    "type": "unsigned"
                },
                "scev-addops-inline-threshold": {
                    "command": "-scev-addops-inline-threshold",
                    "initial_value": "500",
                    "type": "unsigned"
                },
                "scev-mulops-inline-threshold": {
                    "command": "-scev-mulops-inline-threshold",
                    "initial_value": "32",
                    "type": "unsigned"
                },
                "scev-verify-ir": {
                    "command": "-scev-verify-ir",
                    "initial_value": "false",
                    "type": "bool"
                },
                "verify-scev": {
                    "command": "-verify-scev",
                    "type": "bool"
                },
                "verify-scev-maps": {
                    "command": "-verify-scev-maps",
                    "type": "bool"
                }
            }
        },
        "ScopedNoAliasAAWrapperPass": {
            "command": "-scoped-noalias",
            "dependencies": {},
            "description": "Scoped NoAlias Alias Analysis",
            "name": "ScopedNoAliasAAWrapperPass",
            "parameters": {
                "enable-scoped-noalias": {
                    "command": "-enable-scoped-noalias",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "StackSafetyInfoWrapperPass": {
            "command": "-LocalPassArg",
            "dependencies": {
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                },
                "StackSafetyInfoWrapperPass": {
                    "name": "StackSafetyInfoWrapperPass"
                }
            },
            "description": "LocalPassName",
            "name": "StackSafetyInfoWrapperPass",
            "parameters": {
                "stack-safety-max-iterations": {
                    "command": "-stack-safety-max-iterations",
                    "initial_value": "20",
                    "type": "int"
                }
            }
        },
        "SyncDependenceAnalysis": {
            "command": "-sync-dependence",
            "dependencies": {},
            "description": "",
            "name": "SyncDependenceAnalysis",
            "parameters": {}
        },
        "TargetLibraryInfoWrapperPass": {
            "command": "-targetlibinfo",
            "dependencies": {},
            "description": "Target Library Information",
            "name": "TargetLibraryInfoWrapperPass",
            "parameters": {
                "vector-library": {
                    "command": "-vector-library",
                    "initial_value": "TargetLibraryInfoImpl::NoLibrary",
                    "type": "TargetLibraryInfoImpl::VectorLibrary"
                }
            }
        },
        "TargetTransformInfoWrapperPass": {
            "command": "-tti",
            "dependencies": {},
            "description": "Target Transform Information",
            "name": "TargetTransformInfoWrapperPass",
            "parameters": {
                "costmodel-reduxcost": {
                    "command": "-costmodel-reduxcost",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "TypeBasedAAWrapperPass": {
            "command": "-tbaa",
            "dependencies": {},
            "description": "Type-Based Alias Analysis",
            "name": "TypeBasedAAWrapperPass",
            "parameters": {
                "enable-tbaa": {
                    "command": "-enable-tbaa",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "VectorUtils": {
            "command": "-vectorutils",
            "dependencies": {},
            "description": "",
            "name": "VectorUtils",
            "parameters": {
                "max-interleave-group-factor": {
                    "command": "-max-interleave-group-factor",
                    "initial_value": "8",
                    "type": "unsigned"
                }
            }
        },
        "pass_class": "Analysis"
    },
    "Transforms": {
        "ADCELegacyPass": {
            "command": "-adce",
            "dependencies": {
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                }
            },
            "description": "Aggressive Dead Code Elimination",
            "name": "ADCELegacyPass",
            "parameters": {
                "adce-remove-control-flow": {
                    "command": "-adce-remove-control-flow",
                    "initial_value": "true",
                    "type": "bool"
                },
                "adce-remove-loops": {
                    "command": "-adce-remove-loops",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "ASanGlobalsMetadataWrapperPass": {
            "command": "-asan-globals-md",
            "dependencies": {
                "ASanGlobalsMetadataWrapperPass": {
                    "name": "ASanGlobalsMetadataWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Read metadata to mark which globals should be instrumented \"\n                \"when running ASan.",
            "name": "ASanGlobalsMetadataWrapperPass",
            "parameters": {
                "asan-always-slow-path": {
                    "command": "-asan-always-slow-path",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-debug": {
                    "command": "-asan-debug",
                    "initial_value": "0",
                    "type": "int"
                },
                "asan-debug-func": {
                    "command": "-asan-debug-func",
                    "type": "std::string"
                },
                "asan-debug-max": {
                    "command": "-asan-debug-max",
                    "initial_value": "-1",
                    "type": "int"
                },
                "asan-debug-min": {
                    "command": "-asan-debug-min",
                    "initial_value": "-1",
                    "type": "int"
                },
                "asan-debug-stack": {
                    "command": "-asan-debug-stack",
                    "initial_value": "0",
                    "type": "int"
                },
                "asan-detect-invalid-pointer-cmp": {
                    "command": "-asan-detect-invalid-pointer-cmp",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-detect-invalid-pointer-pair": {
                    "command": "-asan-detect-invalid-pointer-pair",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-detect-invalid-pointer-sub": {
                    "command": "-asan-detect-invalid-pointer-sub",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-force-dynamic-shadow": {
                    "command": "-asan-force-dynamic-shadow",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-force-experiment": {
                    "command": "-asan-force-experiment",
                    "initial_value": "0",
                    "type": "uint32_t"
                },
                "asan-globals": {
                    "command": "-asan-globals",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-globals-live-support": {
                    "command": "-asan-globals-live-support",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-initialization-order": {
                    "command": "-asan-initialization-order",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-instrument-atomics": {
                    "command": "-asan-instrument-atomics",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-instrument-dynamic-allocas": {
                    "command": "-asan-instrument-dynamic-allocas",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-instrument-reads": {
                    "command": "-asan-instrument-reads",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-instrument-writes": {
                    "command": "-asan-instrument-writes",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-instrumentation-with-call-threshold": {
                    "command": "-asan-instrumentation-with-call-threshold",
                    "initial_value": "7000",
                    "type": "int"
                },
                "asan-kernel": {
                    "command": "-asan-kernel",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-mapping-offset": {
                    "command": "-asan-mapping-offset",
                    "initial_value": "0",
                    "type": "uint64_t"
                },
                "asan-mapping-scale": {
                    "command": "-asan-mapping-scale",
                    "initial_value": "0",
                    "type": "int"
                },
                "asan-max-inline-poisoning-size": {
                    "command": "-asan-max-inline-poisoning-size",
                    "initial_value": "64",
                    "type": "uint32_t"
                },
                "asan-max-ins-per-bb": {
                    "command": "-asan-max-ins-per-bb",
                    "initial_value": "10000",
                    "type": "int"
                },
                "asan-memory-access-callback-prefix": {
                    "command": "-asan-memory-access-callback-prefix",
                    "initial_value": "\"__asan_\"",
                    "type": "std::string"
                },
                "asan-opt": {
                    "command": "-asan-opt",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-opt-globals": {
                    "command": "-asan-opt-globals",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-opt-same-temp": {
                    "command": "-asan-opt-same-temp",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-opt-stack": {
                    "command": "-asan-opt-stack",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-realign-stack": {
                    "command": "-asan-realign-stack",
                    "initial_value": "32",
                    "type": "unsigned"
                },
                "asan-recover": {
                    "command": "-asan-recover",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-redzone-byval-args": {
                    "command": "-asan-redzone-byval-args",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-skip-promotable-allocas": {
                    "command": "-asan-skip-promotable-allocas",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-stack": {
                    "command": "-asan-stack",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-stack-dynamic-alloca": {
                    "command": "-asan-stack-dynamic-alloca",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-use-after-return": {
                    "command": "-asan-use-after-return",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-use-after-scope": {
                    "command": "-asan-use-after-scope",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-use-odr-indicator": {
                    "command": "-asan-use-odr-indicator",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-use-private-alias": {
                    "command": "-asan-use-private-alias",
                    "initial_value": "false",
                    "type": "bool"
                },
                "asan-with-comdat": {
                    "command": "-asan-with-comdat",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-with-ifunc": {
                    "command": "-asan-with-ifunc",
                    "initial_value": "true",
                    "type": "bool"
                },
                "asan-with-ifunc-suppress-remat": {
                    "command": "-asan-with-ifunc-suppress-remat",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "AddDiscriminatorsLegacyPass": {
            "command": "-add-discriminators",
            "dependencies": {},
            "description": "Add DWARF path discriminators",
            "name": "AddDiscriminatorsLegacyPass",
            "parameters": {
                "no-discriminators": {
                    "command": "-no-discriminators",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "AggressiveInstCombinerLegacyPass": {
            "command": "-aggressive-instcombine",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Combine pattern based expressions",
            "name": "AggressiveInstCombinerLegacyPass",
            "parameters": {}
        },
        "AlignmentFromAssumptions": {
            "command": "-AA_NAME",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "aip_name",
            "name": "AlignmentFromAssumptions",
            "parameters": {}
        },
        "AlwaysInlinerLegacyPass": {
            "command": "-always-inline",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "CallGraphWrapperPass": {
                    "name": "CallGraphWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Inliner for always_inline functions",
            "name": "AlwaysInlinerLegacyPass",
            "parameters": {}
        },
        "ArgPromotion": {
            "command": "-argpromotion",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "CallGraphWrapperPass": {
                    "name": "CallGraphWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Promote 'by reference' arguments to scalars",
            "name": "ArgPromotion",
            "parameters": {}
        },
        "AttributorLegacyPass": {
            "command": "-attributor",
            "dependencies": {},
            "description": "Deduce and propagate attributes",
            "name": "AttributorLegacyPass",
            "parameters": {
                "attributor-disable": {
                    "command": "-attributor-disable",
                    "initial_value": "true",
                    "type": "bool"
                },
                "attributor-max-iterations": {
                    "command": "-attributor-max-iterations",
                    "initial_value": "32",
                    "type": "unsigned"
                },
                "attributor-max-iterations-verify": {
                    "command": "-attributor-max-iterations-verify",
                    "initial_value": "false",
                    "type": "bool"
                },
                "attributor-verify": {
                    "command": "-attributor-verify",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "BDCELegacyPass": {
            "command": "-bdce",
            "dependencies": {
                "DemandedBitsWrapperPass": {
                    "name": "DemandedBitsWrapperPass"
                }
            },
            "description": "Bit-Tracking Dead Code Elimination",
            "name": "BDCELegacyPass",
            "parameters": {}
        },
        "BarrierNoop": {
            "command": "-barrier",
            "dependencies": {},
            "description": "A No-Op Barrier Pass",
            "name": "BarrierNoop",
            "parameters": {}
        },
        "BasicBlockUtils": {
            "command": "-basicblock-utils",
            "dependencies": {},
            "description": "",
            "name": "BasicBlockUtils",
            "parameters": {}
        },
        "BlockExtractor": {
            "command": "-extract-blocks",
            "dependencies": {},
            "description": "Extract basic blocks from module",
            "name": "BlockExtractor",
            "parameters": {
                "extract-blocks-file": {
                    "command": "-extract-blocks-file",
                    "type": "std::string"
                }
            }
        },
        "BoundsCheckingLegacyPass": {
            "command": "-bounds-checking",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Run-time bounds checking",
            "name": "BoundsCheckingLegacyPass",
            "parameters": {
                "bounds-checking-single-trap": {
                    "command": "-bounds-checking-single-trap",
                    "type": "bool"
                }
            }
        },
        "BreakCriticalEdges": {
            "command": "-break-crit-edges",
            "dependencies": {},
            "description": "Break critical edges in CFG",
            "name": "BreakCriticalEdges",
            "parameters": {}
        },
        "BuildLibCalls": {
            "command": "-build-libcalls",
            "dependencies": {},
            "description": "",
            "name": "BuildLibCalls",
            "parameters": {}
        },
        "BypassSlowDivision": {
            "command": "-bypass-slow-division",
            "dependencies": {},
            "description": "",
            "name": "BypassSlowDivision",
            "parameters": {}
        },
        "CFGSimplifyPass": {
            "command": "-simplifycfg",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Simplify the CFG",
            "name": "CFGSimplifyPass",
            "parameters": {
                "bonus-inst-threshold": {
                    "command": "-bonus-inst-threshold",
                    "initial_value": "1",
                    "type": "unsigned"
                },
                "forward-switch-cond": {
                    "command": "-forward-switch-cond",
                    "initial_value": "false",
                    "type": "bool"
                },
                "keep-loops": {
                    "command": "-keep-loops",
                    "initial_value": "true",
                    "type": "bool"
                },
                "sink-common-insts": {
                    "command": "-sink-common-insts",
                    "initial_value": "false",
                    "type": "bool"
                },
                "switch-to-lookup": {
                    "command": "-switch-to-lookup",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "CallPromotionUtils": {
            "command": "-call-promotion-utils",
            "dependencies": {},
            "description": "",
            "name": "CallPromotionUtils",
            "parameters": {}
        },
        "CallSiteSplittingLegacyPass": {
            "command": "-callsite-splitting",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Call-site splitting",
            "name": "CallSiteSplittingLegacyPass",
            "parameters": {
                "callsite-splitting-duplication-threshold": {
                    "command": "-callsite-splitting-duplication-threshold",
                    "initial_value": "5",
                    "type": "unsigned"
                }
            }
        },
        "CalledValuePropagationLegacyPass": {
            "command": "-called-value-propagation",
            "dependencies": {},
            "description": "Called Value Propagation",
            "name": "CalledValuePropagationLegacyPass",
            "parameters": {
                "cvp-max-functions-per-value": {
                    "command": "-cvp-max-functions-per-value",
                    "initial_value": "4",
                    "type": "unsigned"
                }
            }
        },
        "CanonicalizeAliasesLegacyPass": {
            "command": "-canonicalize-aliases",
            "dependencies": {},
            "description": "Canonicalize aliases",
            "name": "CanonicalizeAliasesLegacyPass",
            "parameters": {}
        },
        "CodeExtractor": {
            "command": "-code-extractor",
            "dependencies": {},
            "description": "",
            "name": "CodeExtractor",
            "parameters": {
                "aggregate-extracted-args": {
                    "command": "-aggregate-extracted-args",
                    "type": "bool"
                }
            }
        },
        "ConstantHoistingLegacyPass": {
            "command": "-consthoist",
            "dependencies": {
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Constant Hoisting",
            "name": "ConstantHoistingLegacyPass",
            "parameters": {
                "consthoist-gep": {
                    "command": "-consthoist-gep",
                    "initial_value": "false",
                    "type": "bool"
                },
                "consthoist-min-num-to-rebase": {
                    "command": "-consthoist-min-num-to-rebase",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "consthoist-with-block-frequency": {
                    "command": "-consthoist-with-block-frequency",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "ConstantMergeLegacyPass": {
            "command": "-constmerge",
            "dependencies": {},
            "description": "Merge Duplicate Global Constants",
            "name": "ConstantMergeLegacyPass",
            "parameters": {}
        },
        "ConstantPropagation": {
            "command": "-constprop",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Simple constant propagation",
            "name": "ConstantPropagation",
            "parameters": {}
        },
        "ControlHeightReductionLegacyPass": {
            "command": "-chr",
            "dependencies": {
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "RegionInfoPass": {
                    "name": "RegionInfoPass"
                }
            },
            "description": "Reduce control height in the hot paths",
            "name": "ControlHeightReductionLegacyPass",
            "parameters": {
                "chr-bias-threshold": {
                    "command": "-chr-bias-threshold",
                    "initial_value": "0.99",
                    "type": "double"
                },
                "chr-function-list": {
                    "command": "-chr-function-list",
                    "initial_value": "\"\"",
                    "type": "std::string"
                },
                "chr-merge-threshold": {
                    "command": "-chr-merge-threshold",
                    "initial_value": "2",
                    "type": "unsigned"
                },
                "chr-module-list": {
                    "command": "-chr-module-list",
                    "initial_value": "\"\"",
                    "type": "std::string"
                },
                "force-chr": {
                    "command": "-force-chr",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "CoroCleanup": {
            "command": "-coro-cleanup",
            "dependencies": {},
            "description": "Lower all coroutine related intrinsics",
            "name": "CoroCleanup",
            "parameters": {}
        },
        "CoroEarly": {
            "command": "-coro-early",
            "dependencies": {},
            "description": "Lower early coroutine intrinsics",
            "name": "CoroEarly",
            "parameters": {}
        },
        "CoroElide": {
            "command": "-coro-elide",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                }
            },
            "description": "Coroutine frame allocation elision and indirect calls replacement",
            "name": "CoroElide",
            "parameters": {}
        },
        "CoroFrame": {
            "command": "-coro-suspend-crossing",
            "dependencies": {},
            "description": "",
            "name": "CoroFrame",
            "parameters": {}
        },
        "CoroSplit": {
            "command": "-coro-split",
            "dependencies": {
                "CallGraphWrapperPass": {
                    "name": "CallGraphWrapperPass"
                }
            },
            "description": "Split coroutine into a set of functions driving its state machine",
            "name": "CoroSplit",
            "parameters": {}
        },
        "CorrelatedValuePropagation": {
            "command": "-correlated-propagation",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LazyValueInfoWrapperPass": {
                    "name": "LazyValueInfoWrapperPass"
                }
            },
            "description": "Value Propagation",
            "name": "CorrelatedValuePropagation",
            "parameters": {
                "cvp-dont-add-nowrap-flags": {
                    "command": "-cvp-dont-add-nowrap-flags",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "CrossDSOCFI": {
            "command": "-cross-dso-cfi",
            "dependencies": {},
            "description": "Cross-DSO CFI",
            "name": "CrossDSOCFI",
            "parameters": {}
        },
        "CtorUtils": {
            "command": "-ctor_utils",
            "dependencies": {},
            "description": "",
            "name": "CtorUtils",
            "parameters": {}
        },
        "DAE": {
            "command": "-deadargelim",
            "dependencies": {},
            "description": "Dead Argument Elimination",
            "name": "DAE",
            "parameters": {}
        },
        "DSELegacyPass": {
            "command": "-dse",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "MemoryDependenceWrapperPass": {
                    "name": "MemoryDependenceWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Dead Store Elimination",
            "name": "DSELegacyPass",
            "parameters": {
                "enable-dse-partial-overwrite-tracking": {
                    "command": "-enable-dse-partial-overwrite-tracking",
                    "initial_value": "true",
                    "type": "bool"
                },
                "enable-dse-partial-store-merging": {
                    "command": "-enable-dse-partial-store-merging",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "DataFlowSanitizer": {
            "command": "-dfsan",
            "dependencies": {},
            "description": "DataFlowSanitizer: dynamic data flow analysis.",
            "name": "DataFlowSanitizer",
            "parameters": {
                "dfsan-args-abi": {
                    "command": "-dfsan-args-abi",
                    "type": "bool"
                },
                "dfsan-combine-pointer-labels-on-load": {
                    "command": "-dfsan-combine-pointer-labels-on-load",
                    "initial_value": "true",
                    "type": "bool"
                },
                "dfsan-combine-pointer-labels-on-store": {
                    "command": "-dfsan-combine-pointer-labels-on-store",
                    "initial_value": "false",
                    "type": "bool"
                },
                "dfsan-debug-nonzero-labels": {
                    "command": "-dfsan-debug-nonzero-labels",
                    "type": "bool"
                },
                "dfsan-preserve-alignment": {
                    "command": "-dfsan-preserve-alignment",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "DeadInstElimination": {
            "command": "-die",
            "dependencies": {},
            "description": "Dead Instruction Elimination",
            "name": "DeadInstElimination",
            "parameters": {}
        },
        "DependencyAnalysis": {
            "command": "-objc-arc-dependency",
            "dependencies": {},
            "description": "",
            "name": "DependencyAnalysis",
            "parameters": {}
        },
        "DivRemPairsLegacyPass": {
            "command": "-div-rem-pairs",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                }
            },
            "description": "Hoist/decompose integer division and remainder",
            "name": "DivRemPairsLegacyPass",
            "parameters": {}
        },
        "EarlyCSELegacyPass": {
            "command": "-early-cse",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Early CSE",
            "name": "EarlyCSELegacyPass",
            "parameters": {
                "earlycse-debug-hash": {
                    "command": "-earlycse-debug-hash",
                    "initial_value": "false",
                    "type": "bool"
                },
                "earlycse-mssa-optimization-cap": {
                    "command": "-earlycse-mssa-optimization-cap",
                    "initial_value": "500",
                    "type": "unsigned"
                }
            }
        },
        "EliminateAvailableExternallyLegacyPass": {
            "command": "-elim-avail-extern",
            "dependencies": {},
            "description": "Eliminate Available Externally Globals",
            "name": "EliminateAvailableExternallyLegacyPass",
            "parameters": {}
        },
        "EntryExitInstrumenter": {
            "command": "-ee-instrument",
            "dependencies": {},
            "description": "Instrument function entry/exit with calls to e.g. mcount()",
            "name": "EntryExitInstrumenter",
            "parameters": {}
        },
        "Evaluator": {
            "command": "-evaluator",
            "dependencies": {},
            "description": "",
            "name": "Evaluator",
            "parameters": {}
        },
        "FlattenCFG": {
            "command": "-flattencfg",
            "dependencies": {},
            "description": "",
            "name": "FlattenCFG",
            "parameters": {}
        },
        "FlattenCFGPass": {
            "command": "-flattencfg",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                }
            },
            "description": "Flatten the CFG",
            "name": "FlattenCFGPass",
            "parameters": {}
        },
        "Float2IntLegacyPass": {
            "command": "-float2int",
            "dependencies": {},
            "description": "Float to int",
            "name": "Float2IntLegacyPass",
            "parameters": {
                "float2int-max-integer-bw": {
                    "command": "-float2int-max-integer-bw",
                    "initial_value": "64",
                    "type": "unsigned"
                }
            }
        },
        "ForceFunctionAttrsLegacyPass": {
            "command": "-forceattrs",
            "dependencies": {},
            "description": "Force set function attributes",
            "name": "ForceFunctionAttrsLegacyPass",
            "parameters": {}
        },
        "FunctionComparator": {
            "command": "-functioncomparator",
            "dependencies": {},
            "description": "",
            "name": "FunctionComparator",
            "parameters": {}
        },
        "FunctionImportLegacyPass": {
            "command": "-function-import",
            "dependencies": {},
            "description": "Summary Based Function Import",
            "name": "FunctionImportLegacyPass",
            "parameters": {
                "compute-dead": {
                    "command": "-compute-dead",
                    "initial_value": "true",
                    "type": "bool"
                },
                "enable-import-metadata": {
                    "command": "-enable-import-metadata",
                    "initial_value": "\n#if !defined(NDEBUG",
                    "type": "bool"
                },
                "import-all-index": {
                    "command": "-import-all-index",
                    "type": "bool"
                },
                "import-cold-multiplier": {
                    "command": "-import-cold-multiplier",
                    "initial_value": "0",
                    "type": "float"
                },
                "import-critical-multiplier": {
                    "command": "-import-critical-multiplier",
                    "initial_value": "100.0",
                    "type": "float"
                },
                "import-cutoff": {
                    "command": "-import-cutoff",
                    "initial_value": "-1",
                    "type": "int"
                },
                "import-hot-evolution-factor": {
                    "command": "-import-hot-evolution-factor",
                    "initial_value": "1.0",
                    "type": "float"
                },
                "import-hot-multiplier": {
                    "command": "-import-hot-multiplier",
                    "initial_value": "10.0",
                    "type": "float"
                },
                "import-instr-evolution-factor": {
                    "command": "-import-instr-evolution-factor",
                    "initial_value": "0.7",
                    "type": "float"
                },
                "import-instr-limit": {
                    "command": "-import-instr-limit",
                    "initial_value": "100",
                    "type": "unsigned"
                },
                "print-import-failures": {
                    "command": "-print-import-failures",
                    "initial_value": "false",
                    "type": "bool"
                },
                "print-imports": {
                    "command": "-print-imports",
                    "initial_value": "false",
                    "type": "bool"
                },
                "summary-file": {
                    "command": "-summary-file",
                    "type": "std::string"
                }
            }
        },
        "GCOVProfilerLegacyPass": {
            "command": "-insert-gcov-profiling",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Insert instrumentation for GCOV profiling",
            "name": "GCOVProfilerLegacyPass",
            "parameters": {
                "default-gcov-version": {
                    "command": "-default-gcov-version",
                    "initial_value": "\"402*\"",
                    "type": "std::string"
                },
                "gcov-exit-block-before-body": {
                    "command": "-gcov-exit-block-before-body",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "GVNHoistLegacyPass": {
            "command": "-gvn-hoist",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "MemoryDependenceWrapperPass": {
                    "name": "MemoryDependenceWrapperPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                },
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                }
            },
            "description": "Early GVN Hoisting of Expressions",
            "name": "GVNHoistLegacyPass",
            "parameters": {
                "gvn-hoist-max-bbs": {
                    "command": "-gvn-hoist-max-bbs",
                    "initial_value": "4",
                    "type": "int"
                },
                "gvn-hoist-max-chain-length": {
                    "command": "-gvn-hoist-max-chain-length",
                    "initial_value": "10",
                    "type": "int"
                },
                "gvn-hoist-max-depth": {
                    "command": "-gvn-hoist-max-depth",
                    "initial_value": "100",
                    "type": "int"
                },
                "gvn-max-hoisted": {
                    "command": "-gvn-max-hoisted",
                    "initial_value": "-1",
                    "type": "int"
                }
            }
        },
        "GVNLegacyPass": {
            "command": "-gvn",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "MemoryDependenceWrapperPass": {
                    "name": "MemoryDependenceWrapperPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Global Value Numbering",
            "name": "GVNLegacyPass",
            "parameters": {
                "enable-gvn-memdep": {
                    "command": "-enable-gvn-memdep",
                    "initial_value": "true",
                    "type": "bool"
                },
                "enable-load-pre": {
                    "command": "-enable-load-pre",
                    "initial_value": "true",
                    "type": "bool"
                },
                "enable-pre": {
                    "command": "-enable-pre",
                    "initial_value": "true",
                    "type": "bool"
                },
                "gvn-max-num-deps": {
                    "command": "-gvn-max-num-deps",
                    "initial_value": "100",
                    "type": "uint32_t"
                },
                "gvn-max-recurse-depth": {
                    "command": "-gvn-max-recurse-depth",
                    "initial_value": "1000",
                    "type": "uint32_t"
                }
            }
        },
        "GVNSinkLegacyPass": {
            "command": "-gvn-sink",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                }
            },
            "description": "Early GVN sinking of Expressions",
            "name": "GVNSinkLegacyPass",
            "parameters": {}
        },
        "GlobalDCELegacyPass": {
            "command": "-globaldce",
            "dependencies": {},
            "description": "Dead Global Elimination",
            "name": "GlobalDCELegacyPass",
            "parameters": {}
        },
        "GlobalOptLegacyPass": {
            "command": "-globalopt",
            "dependencies": {
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Global Variable Optimizer",
            "name": "GlobalOptLegacyPass",
            "parameters": {
                "coldcc-rel-freq": {
                    "command": "-coldcc-rel-freq",
                    "initial_value": "2",
                    "type": "int"
                },
                "enable-coldcc-stress-test": {
                    "command": "-enable-coldcc-stress-test",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "GlobalSplit": {
            "command": "-globalsplit",
            "dependencies": {},
            "description": "Global splitter",
            "name": "GlobalSplit",
            "parameters": {}
        },
        "GuardWideningLegacyPass": {
            "command": "-guard-widening",
            "dependencies": {
                "BranchProbabilityInfoWrapperPass": {
                    "name": "BranchProbabilityInfoWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                }
            },
            "description": "Widen guards",
            "name": "GuardWideningLegacyPass",
            "parameters": {
                "guard-widening-frequent-branch-threshold": {
                    "command": "-guard-widening-frequent-branch-threshold",
                    "initial_value": "1000",
                    "type": "unsigned"
                },
                "guard-widening-widen-branch-guards": {
                    "command": "-guard-widening-widen-branch-guards",
                    "initial_value": "true",
                    "type": "bool"
                },
                "guard-widening-widen-frequent-branches": {
                    "command": "-guard-widening-widen-frequent-branches",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "HWAddressSanitizerLegacyPass": {
            "command": "-hwasan",
            "dependencies": {},
            "description": "HWAddressSanitizer: detect memory bugs using tagged addressing.",
            "name": "HWAddressSanitizerLegacyPass",
            "parameters": {
                "hwasan-generate-tags-with-calls": {
                    "command": "-hwasan-generate-tags-with-calls",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-globals": {
                    "command": "-hwasan-globals",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-inline-all-checks": {
                    "command": "-hwasan-inline-all-checks",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-instrument-atomics": {
                    "command": "-hwasan-instrument-atomics",
                    "initial_value": "true",
                    "type": "bool"
                },
                "hwasan-instrument-landing-pads": {
                    "command": "-hwasan-instrument-landing-pads",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-instrument-mem-intrinsics": {
                    "command": "-hwasan-instrument-mem-intrinsics",
                    "initial_value": "true",
                    "type": "bool"
                },
                "hwasan-instrument-personality-functions": {
                    "command": "-hwasan-instrument-personality-functions",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-instrument-reads": {
                    "command": "-hwasan-instrument-reads",
                    "initial_value": "true",
                    "type": "bool"
                },
                "hwasan-instrument-stack": {
                    "command": "-hwasan-instrument-stack",
                    "initial_value": "true",
                    "type": "bool"
                },
                "hwasan-instrument-with-calls": {
                    "command": "-hwasan-instrument-with-calls",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-instrument-writes": {
                    "command": "-hwasan-instrument-writes",
                    "initial_value": "true",
                    "type": "bool"
                },
                "hwasan-kernel": {
                    "command": "-hwasan-kernel",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-mapping-offset": {
                    "command": "-hwasan-mapping-offset",
                    "initial_value": "0",
                    "type": "uint64_t"
                },
                "hwasan-match-all-tag": {
                    "command": "-hwasan-match-all-tag",
                    "initial_value": "-1",
                    "type": "int"
                },
                "hwasan-memory-access-callback-prefix": {
                    "command": "-hwasan-memory-access-callback-prefix",
                    "initial_value": "\"__hwasan_\"",
                    "type": "std::string"
                },
                "hwasan-record-stack-history": {
                    "command": "-hwasan-record-stack-history",
                    "initial_value": "true",
                    "type": "bool"
                },
                "hwasan-recover": {
                    "command": "-hwasan-recover",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-uar-retag-to-zero": {
                    "command": "-hwasan-uar-retag-to-zero",
                    "initial_value": "true",
                    "type": "bool"
                },
                "hwasan-with-ifunc": {
                    "command": "-hwasan-with-ifunc",
                    "initial_value": "false",
                    "type": "bool"
                },
                "hwasan-with-tls": {
                    "command": "-hwasan-with-tls",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "Hello": {
            "command": "-hello",
            "dependencies": {},
            "description": "",
            "name": "Hello",
            "parameters": {}
        },
        "HotColdSplittingLegacyPass": {
            "command": "-hotcoldsplit",
            "dependencies": {
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                }
            },
            "description": "Hot Cold Splitting",
            "name": "HotColdSplittingLegacyPass",
            "parameters": {
                "hot-cold-static-analysis": {
                    "command": "-hot-cold-static-analysis",
                    "initial_value": "true",
                    "type": "bool"
                },
                "hotcoldsplit-threshold": {
                    "command": "-hotcoldsplit-threshold",
                    "initial_value": "2",
                    "type": "int"
                }
            }
        },
        "IPCP": {
            "command": "-ipconstprop",
            "dependencies": {},
            "description": "Interprocedural constant propagation",
            "name": "IPCP",
            "parameters": {}
        },
        "IPSCCPLegacyPass": {
            "command": "-ipsccp",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Interprocedural Sparse Conditional Constant Propagation",
            "name": "IPSCCPLegacyPass",
            "parameters": {}
        },
        "IRCELegacyPass": {
            "command": "-irce",
            "dependencies": {
                "BranchProbabilityInfoWrapperPass": {
                    "name": "BranchProbabilityInfoWrapperPass"
                },
                "LoopPass": {
                    "name": "LoopPass"
                }
            },
            "description": "Inductive range check elimination",
            "name": "IRCELegacyPass",
            "parameters": {
                "irce-allow-narrow-latch": {
                    "command": "-irce-allow-narrow-latch",
                    "initial_value": "true",
                    "type": "bool"
                },
                "irce-allow-unsigned-latch": {
                    "command": "-irce-allow-unsigned-latch",
                    "initial_value": "true",
                    "type": "bool"
                },
                "irce-loop-size-cutoff": {
                    "command": "-irce-loop-size-cutoff",
                    "initial_value": "64",
                    "type": "unsigned"
                },
                "irce-max-exit-prob-reciprocal": {
                    "command": "-irce-max-exit-prob-reciprocal",
                    "initial_value": "10",
                    "type": "int"
                },
                "irce-print-changed-loops": {
                    "command": "-irce-print-changed-loops",
                    "initial_value": "false",
                    "type": "bool"
                },
                "irce-print-range-checks": {
                    "command": "-irce-print-range-checks",
                    "initial_value": "false",
                    "type": "bool"
                },
                "irce-skip-profitability-checks": {
                    "command": "-irce-skip-profitability-checks",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "IVUsersPrinter": {
            "command": "-iv-users",
            "dependencies": {},
            "description": "",
            "name": "IVUsersPrinter",
            "parameters": {}
        },
        "IndVarSimplifyLegacyPass": {
            "command": "-indvars",
            "dependencies": {
                "LoopPass": {
                    "name": "LoopPass"
                }
            },
            "description": "Induction Variable Simplification",
            "name": "IndVarSimplifyLegacyPass",
            "parameters": {
                "disable-lftr": {
                    "command": "-disable-lftr",
                    "initial_value": "false",
                    "type": "bool"
                },
                "indvars-post-increment-ranges": {
                    "command": "-indvars-post-increment-ranges",
                    "initial_value": "true",
                    "type": "bool"
                },
                "replexitval": {
                    "command": "-replexitval",
                    "initial_value": "OnlyCheapRepl",
                    "type": "ReplaceExitVal"
                },
                "verify-indvars": {
                    "command": "-verify-indvars",
                    "type": "bool"
                }
            }
        },
        "InferAddressSpaces": {
            "command": "-infer-address-spaces",
            "dependencies": {},
            "description": "Infer address spaces",
            "name": "InferAddressSpaces",
            "parameters": {}
        },
        "InferFunctionAttrsLegacyPass": {
            "command": "-inferattrs",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Infer set function attributes",
            "name": "InferFunctionAttrsLegacyPass",
            "parameters": {}
        },
        "Inliner": {
            "command": "-inline",
            "dependencies": {},
            "description": "",
            "name": "Inliner",
            "parameters": {
                "disable-inlined-alloca-merging": {
                    "command": "-disable-inlined-alloca-merging",
                    "initial_value": "false",
                    "type": "bool"
                },
                "inline-remark-attribute": {
                    "command": "-inline-remark-attribute",
                    "initial_value": "false",
                    "type": "bool"
                },
                "inliner-function-import-stats": {
                    "command": "-inliner-function-import-stats",
                    "initial_value": "InlinerFunctionImportStatsOpts::No",
                    "type": "InlinerFunctionImportStatsOpts"
                }
            }
        },
        "InstCombineAddSub": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineAddSub",
            "parameters": {}
        },
        "InstCombineAndOrXor": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineAndOrXor",
            "parameters": {}
        },
        "InstCombineCalls": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineCalls",
            "parameters": {
                "instcombine-guard-widening-window": {
                    "command": "-instcombine-guard-widening-window",
                    "initial_value": "3",
                    "type": "unsigned"
                }
            }
        },
        "InstCombineCasts": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineCasts",
            "parameters": {}
        },
        "InstCombineCompares": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineCompares",
            "parameters": {}
        },
        "InstCombineLoadStoreAlloca": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineLoadStoreAlloca",
            "parameters": {}
        },
        "InstCombineMulDivRem": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineMulDivRem",
            "parameters": {}
        },
        "InstCombinePHI": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombinePHI",
            "parameters": {
                "instcombine-max-num-phis": {
                    "command": "-instcombine-max-num-phis",
                    "initial_value": "512",
                    "type": "unsigned"
                }
            }
        },
        "InstCombineSelect": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineSelect",
            "parameters": {}
        },
        "InstCombineShifts": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineShifts",
            "parameters": {}
        },
        "InstCombineSimplifyDemanded": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineSimplifyDemanded",
            "parameters": {}
        },
        "InstCombineVectorOps": {
            "command": "-instcombine",
            "dependencies": {},
            "description": "",
            "name": "InstCombineVectorOps",
            "parameters": {}
        },
        "InstNamer": {
            "command": "-instnamer",
            "dependencies": {},
            "description": "Assign names to anonymous instructions",
            "name": "InstNamer",
            "parameters": {}
        },
        "InstSimplifyLegacyPass": {
            "command": "-instsimplify",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Remove redundant instructions",
            "name": "InstSimplifyLegacyPass",
            "parameters": {}
        },
        "InstrOrderFileLegacyPass": {
            "command": "-instrorderfile",
            "dependencies": {},
            "description": "Instrumentation for Order File",
            "name": "InstrOrderFileLegacyPass",
            "parameters": {
                "orderfile-write-mapping": {
                    "command": "-orderfile-write-mapping",
                    "initial_value": "\"\"",
                    "type": "std::string"
                }
            }
        },
        "InstrProfilingLegacyPass": {
            "command": "-instrprof",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Frontend instrumentation-based coverage lowering.",
            "name": "InstrProfilingLegacyPass",
            "parameters": {}
        },
        "InstructionCombiningPass": {
            "command": "-instcombine",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "LazyBlockFrequencyInfoPass": {
                    "name": "LazyBlockFrequencyInfoPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Combine redundant instructions",
            "name": "InstructionCombiningPass",
            "parameters": {
                "expensive-combines": {
                    "command": "-expensive-combines",
                    "type": "bool"
                },
                "instcombine-code-sinking": {
                    "command": "-instcombine-code-sinking",
                    "initial_value": "true",
                    "type": "bool"
                },
                "instcombine-lower-dbg-declare": {
                    "command": "-instcombine-lower-dbg-declare",
                    "initial_value": "true",
                    "type": "unsigned"
                },
                "instcombine-maxarray-size": {
                    "command": "-instcombine-maxarray-size",
                    "initial_value": "1024",
                    "type": "unsigned"
                }
            }
        },
        "IntegerDivision": {
            "command": "-integer-division",
            "dependencies": {},
            "description": "",
            "name": "IntegerDivision",
            "parameters": {}
        },
        "InternalizeLegacyPass": {
            "command": "-internalize",
            "dependencies": {},
            "description": "Internalize Global Symbols",
            "name": "InternalizeLegacyPass",
            "parameters": {
                "internalize-public-api-file": {
                    "command": "-internalize-public-api-file",
                    "type": "std::string"
                }
            }
        },
        "JumpThreading": {
            "command": "-jump-threading",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LazyValueInfoWrapperPass": {
                    "name": "LazyValueInfoWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Jump Threading",
            "name": "JumpThreading",
            "parameters": {
                "jump-threading-across-loop-headers": {
                    "command": "-jump-threading-across-loop-headers",
                    "initial_value": "false",
                    "type": "bool"
                },
                "jump-threading-implication-search-threshold": {
                    "command": "-jump-threading-implication-search-threshold",
                    "initial_value": "3",
                    "type": "unsigned"
                },
                "jump-threading-threshold": {
                    "command": "-jump-threading-threshold",
                    "initial_value": "6",
                    "type": "unsigned"
                },
                "print-lvi-after-jump-threading": {
                    "command": "-print-lvi-after-jump-threading",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "LCSSAWrapperPass": {
            "command": "-lcssa",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LCSSAVerificationPass": {
                    "name": "LCSSAVerificationPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                }
            },
            "description": "Loop-Closed SSA Form Pass",
            "name": "LCSSAWrapperPass",
            "parameters": {
                "verify-loop-lcssa": {
                    "command": "-verify-loop-lcssa",
                    "type": "bool, true"
                }
            }
        },
        "LegacyLICMPass": {
            "command": "-licm",
            "dependencies": {
                "LoopPass": {
                    "name": "LoopPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Loop Invariant Code Motion",
            "name": "LegacyLICMPass",
            "parameters": {
                "disable-licm-promotion": {
                    "command": "-disable-licm-promotion",
                    "initial_value": "false",
                    "type": "bool"
                },
                "licm-control-flow-hoisting": {
                    "command": "-licm-control-flow-hoisting",
                    "initial_value": "false",
                    "type": "bool"
                },
                "licm-max-num-uses-traversed": {
                    "command": "-licm-max-num-uses-traversed",
                    "initial_value": "8",
                    "type": "uint32_t"
                },
                "licm-n2-threshold": {
                    "command": "-licm-n2-threshold",
                    "initial_value": "0",
                    "type": "int"
                }
            }
        },
        "LegacyLoopSinkPass": {
            "command": "-loop-sink",
            "dependencies": {
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                },
                "LoopPass": {
                    "name": "LoopPass"
                }
            },
            "description": "Loop Sink",
            "name": "LegacyLoopSinkPass",
            "parameters": {
                "max-uses-for-sinking": {
                    "command": "-max-uses-for-sinking",
                    "initial_value": "30",
                    "type": "unsigned"
                },
                "sink-freq-percent-threshold": {
                    "command": "-sink-freq-percent-threshold",
                    "initial_value": "90",
                    "type": "unsigned"
                }
            }
        },
        "LibCallsShrinkWrapLegacyPass": {
            "command": "-libcalls-shrinkwrap",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Conditionally eliminate dead library calls",
            "name": "LibCallsShrinkWrapLegacyPass",
            "parameters": {}
        },
        "LoadStoreVectorizerLegacyPass": {
            "command": "-load-store-vectorizer",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "SCEVAAWrapperPass": {
                    "name": "SCEVAAWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Vectorize load and Store instructions",
            "name": "LoadStoreVectorizerLegacyPass",
            "parameters": {}
        },
        "Local": {
            "command": "-local",
            "dependencies": {},
            "description": "",
            "name": "Local",
            "parameters": {}
        },
        "LoopAccessAnalysisPrinter": {
            "command": "-loop-accesses",
            "dependencies": {},
            "description": "",
            "name": "LoopAccessAnalysisPrinter",
            "parameters": {}
        },
        "LoopDataPrefetchLegacyPass": {
            "command": "-loop-data-prefetch",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Loop Data Prefetch",
            "name": "LoopDataPrefetchLegacyPass",
            "parameters": {
                "loop-prefetch-writes": {
                    "command": "-loop-prefetch-writes",
                    "initial_value": "false",
                    "type": "bool"
                },
                "max-prefetch-iters-ahead": {
                    "command": "-max-prefetch-iters-ahead",
                    "type": "unsigned"
                },
                "min-prefetch-stride": {
                    "command": "-min-prefetch-stride",
                    "type": "unsigned"
                },
                "prefetch-distance": {
                    "command": "-prefetch-distance",
                    "type": "unsigned"
                }
            }
        },
        "LoopDeletionLegacyPass": {
            "command": "-loop-deletion",
            "dependencies": {
                "LoopPass": {
                    "name": "LoopPass"
                }
            },
            "description": "Delete dead loops",
            "name": "LoopDeletionLegacyPass",
            "parameters": {}
        },
        "LoopDistributeLegacy": {
            "command": "-LDIST_NAME",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopAccessLegacyAnalysis": {
                    "name": "LoopAccessLegacyAnalysis"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "ldist_name",
            "name": "LoopDistributeLegacy",
            "parameters": {
                "enable-loop-distribute": {
                    "command": "-enable-loop-distribute",
                    "initial_value": "false",
                    "type": "bool"
                },
                "loop-distribute-non-if-convertible": {
                    "command": "-loop-distribute-non-if-convertible",
                    "initial_value": "false",
                    "type": "bool"
                },
                "loop-distribute-scev-check-threshold": {
                    "command": "-loop-distribute-scev-check-threshold",
                    "initial_value": "8",
                    "type": "unsigned"
                },
                "loop-distribute-scev-check-threshold-with-pragma": {
                    "command": "-loop-distribute-scev-check-threshold-with-pragma",
                    "initial_value": "128",
                    "type": "unsigned"
                },
                "loop-distribute-verify": {
                    "command": "-loop-distribute-verify",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "LoopExtractor": {
            "command": "-loop-extract",
            "dependencies": {
                "BreakCriticalEdges": {
                    "name": "BreakCriticalEdges"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopSimplify": {
                    "name": "LoopSimplify"
                }
            },
            "description": "Extract loops into new functions",
            "name": "LoopExtractor",
            "parameters": {}
        },
        "LoopFuseLegacy": {
            "command": "-loop-fusion",
            "dependencies": {
                "DependenceAnalysisWrapperPass": {
                    "name": "DependenceAnalysisWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "Loop Fusion",
            "name": "LoopFuseLegacy",
            "parameters": {
                "loop-fusion-dependence-analysis": {
                    "command": "-loop-fusion-dependence-analysis",
                    "initial_value": "FUSION_DEPENDENCE_ANALYSIS_ALL",
                    "type": "FusionDependenceAnalysisChoice"
                },
                "loop-fusion-verbose-debug": {
                    "command": "-loop-fusion-verbose-debug",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "LoopIdiomRecognizeLegacyPass": {
            "command": "-loop-idiom",
            "dependencies": {
                "LoopPass": {
                    "name": "LoopPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Recognize loop idioms",
            "name": "LoopIdiomRecognizeLegacyPass",
            "parameters": {
                "use-lir-code-size-heurs": {
                    "command": "-use-lir-code-size-heurs",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "LoopInstSimplifyLegacyPass": {
            "command": "-loop-instsimplify",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "LoopPass": {
                    "name": "LoopPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Simplify instructions in loops",
            "name": "LoopInstSimplifyLegacyPass",
            "parameters": {}
        },
        "LoopInterchange": {
            "command": "-loop-interchange",
            "dependencies": {
                "DependenceAnalysisWrapperPass": {
                    "name": "DependenceAnalysisWrapperPass"
                },
                "LoopPass": {
                    "name": "LoopPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                }
            },
            "description": "Interchanges loops for cache reuse",
            "name": "LoopInterchange",
            "parameters": {
                "loop-interchange-threshold": {
                    "command": "-loop-interchange-threshold",
                    "initial_value": "0",
                    "type": "int"
                }
            }
        },
        "LoopLoadElimination": {
            "command": "-LLE_OPTION",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LazyBlockFrequencyInfoPass": {
                    "name": "LazyBlockFrequencyInfoPass"
                },
                "LoopAccessLegacyAnalysis": {
                    "name": "LoopAccessLegacyAnalysis"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "LoopSimplify": {
                    "name": "LoopSimplify"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "LLE_name",
            "name": "LoopLoadElimination",
            "parameters": {
                "loop-load-elimination-scev-check-threshold": {
                    "command": "-loop-load-elimination-scev-check-threshold",
                    "initial_value": "8",
                    "type": "unsigned"
                },
                "runtime-check-per-loop-load-elim": {
                    "command": "-runtime-check-per-loop-load-elim",
                    "initial_value": "1",
                    "type": "unsigned"
                }
            }
        },
        "LoopPredicationLegacyPass": {
            "command": "-loop-predication",
            "dependencies": {
                "BranchProbabilityInfoWrapperPass": {
                    "name": "BranchProbabilityInfoWrapperPass"
                },
                "LoopPass": {
                    "name": "LoopPass"
                }
            },
            "description": "Loop predication",
            "name": "LoopPredicationLegacyPass",
            "parameters": {
                "loop-predication-enable-count-down-loop": {
                    "command": "-loop-predication-enable-count-down-loop",
                    "initial_value": "true",
                    "type": "bool"
                },
                "loop-predication-enable-iv-truncation": {
                    "command": "-loop-predication-enable-iv-truncation",
                    "initial_value": "true",
                    "type": "bool"
                },
                "loop-predication-latch-probability-scale": {
                    "command": "-loop-predication-latch-probability-scale",
                    "initial_value": "2.0",
                    "type": "float"
                },
                "loop-predication-predicate-widenable-branches-to-deopt": {
                    "command": "-loop-predication-predicate-widenable-branches-to-deopt",
                    "initial_value": "true",
                    "type": "bool"
                },
                "loop-predication-skip-profitability-checks": {
                    "command": "-loop-predication-skip-profitability-checks",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "LoopReroll": {
            "command": "-loop-reroll",
            "dependencies": {
                "LoopPass": {
                    "name": "LoopPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Reroll loops",
            "name": "LoopReroll",
            "parameters": {
                "reroll-num-tolerated-failed-matches": {
                    "command": "-reroll-num-tolerated-failed-matches",
                    "initial_value": "400",
                    "type": "unsigned"
                }
            }
        },
        "LoopRotateLegacyPass": {
            "command": "-loop-rotate",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "LoopPass": {
                    "name": "LoopPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Rotate Loops",
            "name": "LoopRotateLegacyPass",
            "parameters": {
                "rotation-max-header-size": {
                    "command": "-rotation-max-header-size",
                    "initial_value": "16",
                    "type": "unsigned"
                }
            }
        },
        "LoopRotationUtils": {
            "command": "-loop-rotate",
            "dependencies": {},
            "description": "",
            "name": "LoopRotationUtils",
            "parameters": {}
        },
        "LoopSimplify": {
            "command": "-loop-simplify",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                }
            },
            "description": "Canonicalize natural loops",
            "name": "LoopSimplify",
            "parameters": {}
        },
        "LoopSimplifyCFGLegacyPass": {
            "command": "-loop-simplifycfg",
            "dependencies": {
                "LoopPass": {
                    "name": "LoopPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                }
            },
            "description": "Simplify loop CFG",
            "name": "LoopSimplifyCFGLegacyPass",
            "parameters": {
                "enable-loop-simplifycfg-term-folding": {
                    "command": "-enable-loop-simplifycfg-term-folding",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "LoopStrengthReduce": {
            "command": "-loop-reduce",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "IVUsersWrapperPass": {
                    "name": "IVUsersWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "LoopSimplify": {
                    "name": "LoopSimplify"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Loop Strength Reduction",
            "name": "LoopStrengthReduce",
            "parameters": {
                "enable-lsr-phielim": {
                    "command": "-enable-lsr-phielim",
                    "initial_value": "true",
                    "type": "bool"
                },
                "lsr-backedge-indexing": {
                    "command": "-lsr-backedge-indexing",
                    "initial_value": "true",
                    "type": "bool"
                },
                "lsr-complexity-limit": {
                    "command": "-lsr-complexity-limit",
                    "initial_value": "std::numeric_limits<uint16_t>::max(",
                    "type": "unsigned"
                },
                "lsr-exp-narrow": {
                    "command": "-lsr-exp-narrow",
                    "initial_value": "false",
                    "type": "bool"
                },
                "lsr-filter-same-scaled-reg": {
                    "command": "-lsr-filter-same-scaled-reg",
                    "initial_value": "true",
                    "type": "bool"
                },
                "lsr-insns-cost": {
                    "command": "-lsr-insns-cost",
                    "initial_value": "true",
                    "type": "bool"
                },
                "lsr-setupcost-depth-limit": {
                    "command": "-lsr-setupcost-depth-limit",
                    "initial_value": "7",
                    "type": "unsigned"
                },
                "stress-ivchain": {
                    "command": "-stress-ivchain",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "LoopUnroll": {
            "command": "-loop-unroll",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "LoopPass": {
                    "name": "LoopPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Unroll loops",
            "name": "LoopUnroll",
            "parameters": {
                "flat-loop-tripcount-threshold": {
                    "command": "-flat-loop-tripcount-threshold",
                    "initial_value": "5",
                    "type": "unsigned"
                },
                "pragma-unroll-threshold": {
                    "command": "-pragma-unroll-threshold",
                    "initial_value": "16 * 1024",
                    "type": "unsigned"
                },
                "unroll-allow-partial": {
                    "command": "-unroll-allow-partial",
                    "type": "bool"
                },
                "unroll-allow-peeling": {
                    "command": "-unroll-allow-peeling",
                    "initial_value": "true",
                    "type": "bool"
                },
                "unroll-allow-remainder": {
                    "command": "-unroll-allow-remainder",
                    "type": "bool"
                },
                "unroll-count": {
                    "command": "-unroll-count",
                    "type": "unsigned"
                },
                "unroll-full-max-count": {
                    "command": "-unroll-full-max-count",
                    "type": "unsigned"
                },
                "unroll-max-count": {
                    "command": "-unroll-max-count",
                    "type": "unsigned"
                },
                "unroll-max-iteration-count-to-analyze": {
                    "command": "-unroll-max-iteration-count-to-analyze",
                    "initial_value": "10",
                    "type": "unsigned"
                },
                "unroll-max-percent-threshold-boost": {
                    "command": "-unroll-max-percent-threshold-boost",
                    "initial_value": "400",
                    "type": "unsigned"
                },
                "unroll-max-upperbound": {
                    "command": "-unroll-max-upperbound",
                    "initial_value": "8",
                    "type": "unsigned"
                },
                "unroll-partial-threshold": {
                    "command": "-unroll-partial-threshold",
                    "type": "unsigned"
                },
                "unroll-peel-count": {
                    "command": "-unroll-peel-count",
                    "type": "unsigned"
                },
                "unroll-remainder": {
                    "command": "-unroll-remainder",
                    "type": "bool"
                },
                "unroll-revisit-child-loops": {
                    "command": "-unroll-revisit-child-loops",
                    "type": "bool"
                },
                "unroll-runtime": {
                    "command": "-unroll-runtime",
                    "type": "bool"
                },
                "unroll-threshold": {
                    "command": "-unroll-threshold",
                    "type": "unsigned"
                }
            }
        },
        "LoopUnrollAndJam": {
            "command": "-loop-unroll-and-jam",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DependenceAnalysisWrapperPass": {
                    "name": "DependenceAnalysisWrapperPass"
                },
                "LoopPass": {
                    "name": "LoopPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Unroll and Jam loops",
            "name": "LoopUnrollAndJam",
            "parameters": {
                "allow-unroll-and-jam": {
                    "command": "-allow-unroll-and-jam",
                    "type": "bool"
                },
                "pragma-unroll-and-jam-threshold": {
                    "command": "-pragma-unroll-and-jam-threshold",
                    "initial_value": "1024",
                    "type": "unsigned"
                },
                "unroll-and-jam-count": {
                    "command": "-unroll-and-jam-count",
                    "type": "unsigned"
                },
                "unroll-and-jam-threshold": {
                    "command": "-unroll-and-jam-threshold",
                    "initial_value": "60",
                    "type": "unsigned"
                }
            }
        },
        "LoopUnrollPeel": {
            "command": "-loop-unroll",
            "dependencies": {},
            "description": "",
            "name": "LoopUnrollPeel",
            "parameters": {
                "unroll-force-peel-count": {
                    "command": "-unroll-force-peel-count",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "unroll-peel-max-count": {
                    "command": "-unroll-peel-max-count",
                    "initial_value": "7",
                    "type": "unsigned"
                },
                "unroll-peel-multi-deopt-exit": {
                    "command": "-unroll-peel-multi-deopt-exit",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "LoopUnrollRuntime": {
            "command": "-loop-unroll",
            "dependencies": {},
            "description": "",
            "name": "LoopUnrollRuntime",
            "parameters": {
                "unroll-runtime-multi-exit": {
                    "command": "-unroll-runtime-multi-exit",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "LoopUnswitch": {
            "command": "-loop-unswitch",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "LegacyDivergenceAnalysis": {
                    "name": "LegacyDivergenceAnalysis"
                },
                "LoopPass": {
                    "name": "LoopPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Unswitch loops",
            "name": "LoopUnswitch",
            "parameters": {
                "loop-unswitch-threshold": {
                    "command": "-loop-unswitch-threshold",
                    "initial_value": "100",
                    "type": "unsigned"
                }
            }
        },
        "LoopUtils": {
            "command": "-loop-utils",
            "dependencies": {},
            "description": "",
            "name": "LoopUtils",
            "parameters": {}
        },
        "LoopVectorize": {
            "command": "-LV_NAME",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "BasicAAWrapperPass": {
                    "name": "BasicAAWrapperPass"
                },
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                },
                "DemandedBitsWrapperPass": {
                    "name": "DemandedBitsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "LoopAccessLegacyAnalysis": {
                    "name": "LoopAccessLegacyAnalysis"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "lv_name",
            "name": "LoopVectorize",
            "parameters": {
                "enable-cond-stores-vec": {
                    "command": "-enable-cond-stores-vec",
                    "initial_value": "true",
                    "type": "bool"
                },
                "enable-ind-var-reg-heur": {
                    "command": "-enable-ind-var-reg-heur",
                    "initial_value": "true",
                    "type": "bool"
                },
                "enable-interleaved-mem-accesses": {
                    "command": "-enable-interleaved-mem-accesses",
                    "initial_value": "false",
                    "type": "bool"
                },
                "enable-loadstore-runtime-interleave": {
                    "command": "-enable-loadstore-runtime-interleave",
                    "initial_value": "true",
                    "type": "bool"
                },
                "enable-masked-interleaved-mem-accesses": {
                    "command": "-enable-masked-interleaved-mem-accesses",
                    "initial_value": "false",
                    "type": "bool"
                },
                "force-target-instruction-cost": {
                    "command": "-force-target-instruction-cost",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "force-target-max-scalar-interleave": {
                    "command": "-force-target-max-scalar-interleave",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "force-target-max-vector-interleave": {
                    "command": "-force-target-max-vector-interleave",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "force-target-num-scalar-regs": {
                    "command": "-force-target-num-scalar-regs",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "force-target-num-vector-regs": {
                    "command": "-force-target-num-vector-regs",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "loop-vectorize-with-block-frequency": {
                    "command": "-loop-vectorize-with-block-frequency",
                    "initial_value": "true",
                    "type": "bool"
                },
                "max-nested-scalar-reduction-interleave": {
                    "command": "-max-nested-scalar-reduction-interleave",
                    "initial_value": "2",
                    "type": "unsigned"
                },
                "prefer-predicate-over-epilog": {
                    "command": "-prefer-predicate-over-epilog",
                    "initial_value": "false",
                    "type": "bool"
                },
                "small-loop-cost": {
                    "command": "-small-loop-cost",
                    "initial_value": "20",
                    "type": "unsigned"
                },
                "vectorize-num-stores-pred": {
                    "command": "-vectorize-num-stores-pred",
                    "initial_value": "1",
                    "type": "unsigned"
                },
                "vectorizer-maximize-bandwidth": {
                    "command": "-vectorizer-maximize-bandwidth",
                    "initial_value": "false",
                    "type": "bool"
                },
                "vectorizer-min-trip-count": {
                    "command": "-vectorizer-min-trip-count",
                    "initial_value": "16",
                    "type": "unsigned"
                },
                "vplan-build-stress-test": {
                    "command": "-vplan-build-stress-test",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "LoopVersioningLICM": {
            "command": "-loop-versioning-licm",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "LCSSAWrapperPass": {
                    "name": "LCSSAWrapperPass"
                },
                "LoopAccessLegacyAnalysis": {
                    "name": "LoopAccessLegacyAnalysis"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "LoopSimplify": {
                    "name": "LoopSimplify"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "Loop Versioning For LICM",
            "name": "LoopVersioningLICM",
            "parameters": {
                "licm-versioning-invariant-threshold": {
                    "command": "-licm-versioning-invariant-threshold",
                    "initial_value": "25",
                    "type": "float"
                },
                "licm-versioning-max-depth-threshold": {
                    "command": "-licm-versioning-max-depth-threshold",
                    "initial_value": "2",
                    "type": "unsigned"
                }
            }
        },
        "LoopVersioningPass": {
            "command": "-LVER_OPTION",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopAccessLegacyAnalysis": {
                    "name": "LoopAccessLegacyAnalysis"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "LVer_name",
            "name": "LoopVersioningPass",
            "parameters": {
                "loop-version-annotate-no-alias": {
                    "command": "-loop-version-annotate-no-alias",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "LowerAtomicLegacyPass": {
            "command": "-loweratomic",
            "dependencies": {},
            "description": "Lower atomic intrinsics to non-atomic form",
            "name": "LowerAtomicLegacyPass",
            "parameters": {}
        },
        "LowerExpectIntrinsic": {
            "command": "-lower-expect",
            "dependencies": {},
            "description": "Lower 'expect' Intrinsics",
            "name": "LowerExpectIntrinsic",
            "parameters": {
                "likely-branch-weight": {
                    "command": "-likely-branch-weight",
                    "initial_value": "2000",
                    "type": "uint32_t"
                },
                "unlikely-branch-weight": {
                    "command": "-unlikely-branch-weight",
                    "initial_value": "1",
                    "type": "uint32_t"
                }
            }
        },
        "LowerGuardIntrinsicLegacyPass": {
            "command": "-lower-guard-intrinsic",
            "dependencies": {},
            "description": "Lower the guard intrinsic to normal control flow",
            "name": "LowerGuardIntrinsicLegacyPass",
            "parameters": {}
        },
        "LowerInvokeLegacyPass": {
            "command": "-lowerinvoke",
            "dependencies": {},
            "description": "Lower invoke and unwind",
            "name": "LowerInvokeLegacyPass",
            "parameters": {}
        },
        "LowerSwitch": {
            "command": "-lowerswitch",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "LazyValueInfoWrapperPass": {
                    "name": "LazyValueInfoWrapperPass"
                }
            },
            "description": "Lower SwitchInst's to branches",
            "name": "LowerSwitch",
            "parameters": {}
        },
        "LowerTypeTests": {
            "command": "-lowertypetests",
            "dependencies": {},
            "description": "Lower type metadata",
            "name": "LowerTypeTests",
            "parameters": {
                "lowertypetests-avoid-reuse": {
                    "command": "-lowertypetests-avoid-reuse",
                    "initial_value": "true",
                    "type": "bool"
                },
                "lowertypetests-read-summary": {
                    "command": "-lowertypetests-read-summary",
                    "type": "std::string"
                },
                "lowertypetests-summary-action": {
                    "command": "-lowertypetests-summary-action",
                    "type": "PassSummaryAction"
                },
                "lowertypetests-write-summary": {
                    "command": "-lowertypetests-write-summary",
                    "type": "std::string"
                }
            }
        },
        "LowerWidenableConditionLegacyPass": {
            "command": "-lower-widenable-condition",
            "dependencies": {},
            "description": "Lower the widenable condition to default true value",
            "name": "LowerWidenableConditionLegacyPass",
            "parameters": {}
        },
        "MakeGuardsExplicitLegacyPass": {
            "command": "-make-guards-explicit",
            "dependencies": {},
            "description": "Lower the guard intrinsic to explicit control flow form",
            "name": "MakeGuardsExplicitLegacyPass",
            "parameters": {}
        },
        "MemCpyOptLegacyPass": {
            "command": "-memcpyopt",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "MemoryDependenceWrapperPass": {
                    "name": "MemoryDependenceWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "MemCpy Optimization",
            "name": "MemCpyOptLegacyPass",
            "parameters": {}
        },
        "MemorySanitizerLegacyPass": {
            "command": "-msan",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "MemorySanitizer: detects uninitialized reads.",
            "name": "MemorySanitizerLegacyPass",
            "parameters": {
                "msan-and-mask": {
                    "command": "-msan-and-mask",
                    "initial_value": "0",
                    "type": "uint64_t"
                },
                "msan-check-access-address": {
                    "command": "-msan-check-access-address",
                    "initial_value": "true",
                    "type": "bool"
                },
                "msan-check-constant-shadow": {
                    "command": "-msan-check-constant-shadow",
                    "initial_value": "false",
                    "type": "bool"
                },
                "msan-dump-strict-instructions": {
                    "command": "-msan-dump-strict-instructions",
                    "initial_value": "false",
                    "type": "bool"
                },
                "msan-handle-asm-conservative": {
                    "command": "-msan-handle-asm-conservative",
                    "initial_value": "true",
                    "type": "bool"
                },
                "msan-handle-icmp": {
                    "command": "-msan-handle-icmp",
                    "initial_value": "true",
                    "type": "bool"
                },
                "msan-handle-icmp-exact": {
                    "command": "-msan-handle-icmp-exact",
                    "initial_value": "false",
                    "type": "bool"
                },
                "msan-handle-lifetime-intrinsics": {
                    "command": "-msan-handle-lifetime-intrinsics",
                    "initial_value": "true",
                    "type": "bool"
                },
                "msan-instrumentation-with-call-threshold": {
                    "command": "-msan-instrumentation-with-call-threshold",
                    "initial_value": "3500",
                    "type": "int"
                },
                "msan-keep-going": {
                    "command": "-msan-keep-going",
                    "initial_value": "false",
                    "type": "bool"
                },
                "msan-kernel": {
                    "command": "-msan-kernel",
                    "initial_value": "false",
                    "type": "bool"
                },
                "msan-origin-base": {
                    "command": "-msan-origin-base",
                    "initial_value": "0",
                    "type": "uint64_t"
                },
                "msan-poison-stack": {
                    "command": "-msan-poison-stack",
                    "initial_value": "true",
                    "type": "bool"
                },
                "msan-poison-stack-pattern": {
                    "command": "-msan-poison-stack-pattern",
                    "initial_value": "0xff",
                    "type": "int"
                },
                "msan-poison-stack-with-call": {
                    "command": "-msan-poison-stack-with-call",
                    "initial_value": "false",
                    "type": "bool"
                },
                "msan-poison-undef": {
                    "command": "-msan-poison-undef",
                    "initial_value": "true",
                    "type": "bool"
                },
                "msan-shadow-base": {
                    "command": "-msan-shadow-base",
                    "initial_value": "0",
                    "type": "uint64_t"
                },
                "msan-track-origins": {
                    "command": "-msan-track-origins",
                    "initial_value": "0",
                    "type": "int"
                },
                "msan-with-comdat": {
                    "command": "-msan-with-comdat",
                    "initial_value": "false",
                    "type": "bool"
                },
                "msan-xor-mask": {
                    "command": "-msan-xor-mask",
                    "initial_value": "0",
                    "type": "uint64_t"
                }
            }
        },
        "MergeFunctions": {
            "command": "-mergefunc",
            "dependencies": {},
            "description": "Merge Functions",
            "name": "MergeFunctions",
            "parameters": {
                "mergefunc-preserve-debug-info": {
                    "command": "-mergefunc-preserve-debug-info",
                    "initial_value": "false",
                    "type": "bool"
                },
                "mergefunc-sanity": {
                    "command": "-mergefunc-sanity",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "mergefunc-use-aliases": {
                    "command": "-mergefunc-use-aliases",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "MergeICmpsLegacyPass": {
            "command": "-mergeicmps",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Merge contiguous icmps into a memcmp",
            "name": "MergeICmpsLegacyPass",
            "parameters": {}
        },
        "MergedLoadStoreMotionLegacyPass": {
            "command": "-mldst-motion",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                }
            },
            "description": "MergedLoadStoreMotion",
            "name": "MergedLoadStoreMotionLegacyPass",
            "parameters": {}
        },
        "MetaRenamer": {
            "command": "-metarenamer",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Assign new names to everything",
            "name": "MetaRenamer",
            "parameters": {}
        },
        "ModuleSanitizerCoverageLegacyPass": {
            "command": "-module-sancov",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "ModuleSanitizerCoverageLegacyPass": {
                    "name": "ModuleSanitizerCoverageLegacyPass"
                },
                "PostDominatorTreeWrapperPass": {
                    "name": "PostDominatorTreeWrapperPass"
                }
            },
            "description": "Pass for inserting sancov top-level initialization calls",
            "name": "ModuleSanitizerCoverageLegacyPass",
            "parameters": {
                "sanitizer-coverage-inline-8bit-counters": {
                    "command": "-sanitizer-coverage-inline-8bit-counters",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sanitizer-coverage-level": {
                    "command": "-sanitizer-coverage-level",
                    "initial_value": "0",
                    "type": "int"
                },
                "sanitizer-coverage-pc-table": {
                    "command": "-sanitizer-coverage-pc-table",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sanitizer-coverage-prune-blocks": {
                    "command": "-sanitizer-coverage-prune-blocks",
                    "initial_value": "true",
                    "type": "bool"
                },
                "sanitizer-coverage-stack-depth": {
                    "command": "-sanitizer-coverage-stack-depth",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sanitizer-coverage-trace-compares": {
                    "command": "-sanitizer-coverage-trace-compares",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sanitizer-coverage-trace-divs": {
                    "command": "-sanitizer-coverage-trace-divs",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sanitizer-coverage-trace-geps": {
                    "command": "-sanitizer-coverage-trace-geps",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sanitizer-coverage-trace-pc": {
                    "command": "-sanitizer-coverage-trace-pc",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sanitizer-coverage-trace-pc-guard": {
                    "command": "-sanitizer-coverage-trace-pc-guard",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "NameAnonGlobalLegacyPass": {
            "command": "-name-anon-globals",
            "dependencies": {},
            "description": "Provide a name to nameless globals",
            "name": "NameAnonGlobalLegacyPass",
            "parameters": {}
        },
        "NaryReassociateLegacyPass": {
            "command": "-nary-reassociate",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Nary reassociation",
            "name": "NaryReassociateLegacyPass",
            "parameters": {}
        },
        "NewGVNLegacyPass": {
            "command": "-newgvn",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "GlobalsAAWrapperPass": {
                    "name": "GlobalsAAWrapperPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Global Value Numbering",
            "name": "NewGVNLegacyPass",
            "parameters": {
                "enable-phi-of-ops": {
                    "command": "-enable-phi-of-ops",
                    "initial_value": "true",
                    "type": "bool"
                },
                "enable-store-refinement": {
                    "command": "-enable-store-refinement",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "ObjCARCAPElim": {
            "command": "-objc-arc-apelim",
            "dependencies": {},
            "description": "ObjC ARC autorelease pool elimination",
            "name": "ObjCARCAPElim",
            "parameters": {}
        },
        "ObjCARCContract": {
            "command": "-objc-arc-contract",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                }
            },
            "description": "ObjC ARC contraction",
            "name": "ObjCARCContract",
            "parameters": {
                "arc-contract-max-bb-size": {
                    "command": "-arc-contract-max-bb-size",
                    "initial_value": "65535",
                    "type": "unsigned"
                }
            }
        },
        "ObjCARCExpand": {
            "command": "-objc-arc-expand",
            "dependencies": {},
            "description": "ObjC ARC expansion",
            "name": "ObjCARCExpand",
            "parameters": {}
        },
        "ObjCARCOpt": {
            "command": "-objc-arc",
            "dependencies": {
                "ObjCARCAAWrapperPass": {
                    "name": "ObjCARCAAWrapperPass"
                }
            },
            "description": "ObjC ARC optimization",
            "name": "ObjCARCOpt",
            "parameters": {
                "arc-opt-max-ptr-states": {
                    "command": "-arc-opt-max-ptr-states",
                    "initial_value": "4095",
                    "type": "unsigned"
                }
            }
        },
        "PAEval": {
            "command": "-pa-eval",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                }
            },
            "description": "Evaluate ProvenanceAnalysis on all pairs",
            "name": "PAEval",
            "parameters": {}
        },
        "PGOIndirectCallPromotionLegacyPass": {
            "command": "-pgo-icall-prom",
            "dependencies": {
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                }
            },
            "description": "Use PGO instrumentation profile to promote indirect \"\n                      \"calls to direct calls.",
            "name": "PGOIndirectCallPromotionLegacyPass",
            "parameters": {
                "disable-icp": {
                    "command": "-disable-icp",
                    "initial_value": "false",
                    "type": "bool"
                },
                "icp-call-only": {
                    "command": "-icp-call-only",
                    "initial_value": "false",
                    "type": "bool"
                },
                "icp-csskip": {
                    "command": "-icp-csskip",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "icp-cutoff": {
                    "command": "-icp-cutoff",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "icp-dumpafter": {
                    "command": "-icp-dumpafter",
                    "initial_value": "false",
                    "type": "bool"
                },
                "icp-invoke-only": {
                    "command": "-icp-invoke-only",
                    "initial_value": "false",
                    "type": "bool"
                },
                "icp-lto": {
                    "command": "-icp-lto",
                    "initial_value": "false",
                    "type": "bool"
                },
                "icp-samplepgo": {
                    "command": "-icp-samplepgo",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "PGOInstrumentationGenLegacyPass": {
            "command": "-pgo-instr-gen",
            "dependencies": {
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                },
                "BranchProbabilityInfoWrapperPass": {
                    "name": "BranchProbabilityInfoWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                }
            },
            "description": "PGO instrumentation.",
            "name": "PGOInstrumentationGenLegacyPass",
            "parameters": {
                "disable-vp": {
                    "command": "-disable-vp",
                    "initial_value": "false",
                    "type": "bool"
                },
                "do-comdat-renaming": {
                    "command": "-do-comdat-renaming",
                    "initial_value": "false",
                    "type": "bool"
                },
                "icp-max-annotations": {
                    "command": "-icp-max-annotations",
                    "initial_value": "3",
                    "type": "unsigned"
                },
                "memop-max-annotations": {
                    "command": "-memop-max-annotations",
                    "initial_value": "4",
                    "type": "unsigned"
                },
                "no-pgo-warn-mismatch": {
                    "command": "-no-pgo-warn-mismatch",
                    "initial_value": "false",
                    "type": "bool"
                },
                "no-pgo-warn-mismatch-comdat": {
                    "command": "-no-pgo-warn-mismatch-comdat",
                    "initial_value": "true",
                    "type": "bool"
                },
                "pgo-emit-branch-prob": {
                    "command": "-pgo-emit-branch-prob",
                    "initial_value": "false",
                    "type": "bool"
                },
                "pgo-instr-memop": {
                    "command": "-pgo-instr-memop",
                    "initial_value": "true",
                    "type": "bool"
                },
                "pgo-instr-select": {
                    "command": "-pgo-instr-select",
                    "initial_value": "true",
                    "type": "bool"
                },
                "pgo-test-profile-file": {
                    "command": "-pgo-test-profile-file",
                    "initial_value": "\"\"",
                    "type": "std::string"
                },
                "pgo-test-profile-remapping-file": {
                    "command": "-pgo-test-profile-remapping-file",
                    "initial_value": "\"\"",
                    "type": "std::string"
                },
                "pgo-view-raw-counts": {
                    "command": "-pgo-view-raw-counts",
                    "type": "PGOViewCountsType"
                },
                "pgo-warn-missing-function": {
                    "command": "-pgo-warn-missing-function",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "PGOMemOPSizeOptLegacyPass": {
            "command": "-pgo-memop-opt",
            "dependencies": {
                "BlockFrequencyInfoWrapperPass": {
                    "name": "BlockFrequencyInfoWrapperPass"
                }
            },
            "description": "Optimize memory intrinsic using its size value profile",
            "name": "PGOMemOPSizeOptLegacyPass",
            "parameters": {
                "disable-memop-opt": {
                    "command": "-disable-memop-opt",
                    "initial_value": "false",
                    "type": "bool"
                },
                "pgo-memop-count-threshold": {
                    "command": "-pgo-memop-count-threshold",
                    "initial_value": "1000",
                    "type": "unsigned"
                },
                "pgo-memop-max-version": {
                    "command": "-pgo-memop-max-version",
                    "initial_value": "3",
                    "type": "unsigned"
                },
                "pgo-memop-percent-threshold": {
                    "command": "-pgo-memop-percent-threshold",
                    "initial_value": "40",
                    "type": "unsigned"
                },
                "pgo-memop-scale-count": {
                    "command": "-pgo-memop-scale-count",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "PartialInlinerLegacyPass": {
            "command": "-partial-inliner",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Partial Inliner",
            "name": "PartialInlinerLegacyPass",
            "parameters": {
                "cold-branch-ratio": {
                    "command": "-cold-branch-ratio",
                    "initial_value": "0.1",
                    "type": "float"
                },
                "disable-mr-partial-inlining": {
                    "command": "-disable-mr-partial-inlining",
                    "initial_value": "false",
                    "type": "bool"
                },
                "disable-partial-inlining": {
                    "command": "-disable-partial-inlining",
                    "initial_value": "false",
                    "type": "bool"
                },
                "max-num-inline-blocks": {
                    "command": "-max-num-inline-blocks",
                    "initial_value": "5",
                    "type": "unsigned"
                },
                "max-partial-inlining": {
                    "command": "-max-partial-inlining",
                    "initial_value": "-1",
                    "type": "int"
                },
                "min-block-execution": {
                    "command": "-min-block-execution",
                    "initial_value": "100",
                    "type": "unsigned"
                },
                "min-region-size-ratio": {
                    "command": "-min-region-size-ratio",
                    "initial_value": "0.1",
                    "type": "float"
                },
                "outline-region-freq-percent": {
                    "command": "-outline-region-freq-percent",
                    "initial_value": "75",
                    "type": "int"
                },
                "partial-inlining-extra-penalty": {
                    "command": "-partial-inlining-extra-penalty",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "pi-force-live-exit-outline": {
                    "command": "-pi-force-live-exit-outline",
                    "initial_value": "false",
                    "type": "bool"
                },
                "pi-mark-coldcc": {
                    "command": "-pi-mark-coldcc",
                    "initial_value": "false",
                    "type": "bool"
                },
                "skip-partial-inlining-cost-analysis": {
                    "command": "-skip-partial-inlining-cost-analysis",
                    "initial_value": "false",
                    "type": "bool"
                },
                "trace-partial-inlining": {
                    "command": "-trace-partial-inlining",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "PartiallyInlineLibCallsLegacyPass": {
            "command": "-partially-inline-libcalls",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Partially inline calls to library functions",
            "name": "PartiallyInlineLibCallsLegacyPass",
            "parameters": {}
        },
        "PlaceBackedgeSafepointsImpl": {
            "command": "-place-backedge-safepoints-impl",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                }
            },
            "description": "Place Backedge Safepoints",
            "name": "PlaceBackedgeSafepointsImpl",
            "parameters": {
                "spp-all-backedges": {
                    "command": "-spp-all-backedges",
                    "initial_value": "false",
                    "type": "bool"
                },
                "spp-counted-loop-trip-width": {
                    "command": "-spp-counted-loop-trip-width",
                    "initial_value": "32",
                    "type": "int"
                },
                "spp-no-backedge": {
                    "command": "-spp-no-backedge",
                    "initial_value": "false",
                    "type": "bool"
                },
                "spp-no-call": {
                    "command": "-spp-no-call",
                    "initial_value": "false",
                    "type": "bool"
                },
                "spp-no-entry": {
                    "command": "-spp-no-entry",
                    "initial_value": "false",
                    "type": "bool"
                },
                "spp-split-backedge": {
                    "command": "-spp-split-backedge",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "PoisonChecking": {
            "command": "-poison-checking",
            "dependencies": {},
            "description": "",
            "name": "PoisonChecking",
            "parameters": {
                "poison-checking-function-local": {
                    "command": "-poison-checking-function-local",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "PostOrderFunctionAttrsLegacyPass": {
            "command": "-functionattrs",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "CallGraphWrapperPass": {
                    "name": "CallGraphWrapperPass"
                }
            },
            "description": "Deduce function attributes",
            "name": "PostOrderFunctionAttrsLegacyPass",
            "parameters": {
                "disable-nofree-inference": {
                    "command": "-disable-nofree-inference",
                    "type": "bool"
                },
                "disable-nounwind-inference": {
                    "command": "-disable-nounwind-inference",
                    "type": "bool"
                },
                "enable-nonnull-arg-prop": {
                    "command": "-enable-nonnull-arg-prop",
                    "type": "bool"
                }
            }
        },
        "PredicateInfoPrinterLegacyPass": {
            "command": "-print-predicateinfo",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                }
            },
            "description": "PredicateInfo Printer",
            "name": "PredicateInfoPrinterLegacyPass",
            "parameters": {
                "verify-predicateinfo": {
                    "command": "-verify-predicateinfo",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "PromoteLegacyPass": {
            "command": "-mem2reg",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                }
            },
            "description": "Promote Memory to \"\n                                                    \"Register",
            "name": "PromoteLegacyPass",
            "parameters": {}
        },
        "PromoteMemoryToRegister": {
            "command": "-mem2reg",
            "dependencies": {},
            "description": "",
            "name": "PromoteMemoryToRegister",
            "parameters": {}
        },
        "PruneEH": {
            "command": "-prune-eh",
            "dependencies": {
                "CallGraphWrapperPass": {
                    "name": "CallGraphWrapperPass"
                }
            },
            "description": "Remove unused exception handling info",
            "name": "PruneEH",
            "parameters": {}
        },
        "PtrState": {
            "command": "-objc-arc-ptr-state",
            "dependencies": {},
            "description": "",
            "name": "PtrState",
            "parameters": {}
        },
        "ReassociateLegacyPass": {
            "command": "-reassociate",
            "dependencies": {},
            "description": "Reassociate expressions",
            "name": "ReassociateLegacyPass",
            "parameters": {}
        },
        "RegToMem": {
            "command": "-reg2mem",
            "dependencies": {
                "BreakCriticalEdges": {
                    "name": "BreakCriticalEdges"
                }
            },
            "description": "Demote all values to stack slots",
            "name": "RegToMem",
            "parameters": {}
        },
        "RewriteStatepointsForGCLegacyPass": {
            "command": "-rewrite-statepoints-for-gc",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Make relocations explicit at statepoints",
            "name": "RewriteStatepointsForGCLegacyPass",
            "parameters": {
                "rs4gc-allow-statepoint-with-no-deopt-info": {
                    "command": "-rs4gc-allow-statepoint-with-no-deopt-info",
                    "initial_value": "true",
                    "type": "bool"
                },
                "rs4gc-clobber-non-live": {
                    "command": "-rs4gc-clobber-non-live",
                    "type": "bool, true"
                },
                "spp-print-base-pointers": {
                    "command": "-spp-print-base-pointers",
                    "initial_value": "false",
                    "type": "bool"
                },
                "spp-print-liveset": {
                    "command": "-spp-print-liveset",
                    "initial_value": "false",
                    "type": "bool"
                },
                "spp-print-liveset-size": {
                    "command": "-spp-print-liveset-size",
                    "initial_value": "false",
                    "type": "bool"
                },
                "spp-rematerialization-threshold": {
                    "command": "-spp-rematerialization-threshold",
                    "initial_value": "6",
                    "type": "unsigned"
                }
            }
        },
        "RewriteSymbolsLegacyPass": {
            "command": "-rewrite-symbols",
            "dependencies": {},
            "description": "Rewrite Symbols",
            "name": "RewriteSymbolsLegacyPass",
            "parameters": {}
        },
        "SCCPLegacyPass": {
            "command": "-sccp",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Sparse Conditional Constant Propagation",
            "name": "SCCPLegacyPass",
            "parameters": {}
        },
        "SLPVectorizer": {
            "command": "-SV_NAME",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DemandedBitsWrapperPass": {
                    "name": "DemandedBitsWrapperPass"
                },
                "LoopSimplify": {
                    "name": "LoopSimplify"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "lv_name",
            "name": "SLPVectorizer",
            "parameters": {
                "slp-max-reg-size": {
                    "command": "-slp-max-reg-size",
                    "initial_value": "128",
                    "type": "int"
                },
                "slp-min-reg-size": {
                    "command": "-slp-min-reg-size",
                    "initial_value": "128",
                    "type": "int"
                },
                "slp-min-tree-size": {
                    "command": "-slp-min-tree-size",
                    "initial_value": "3",
                    "type": "unsigned"
                },
                "slp-recursion-max-depth": {
                    "command": "-slp-recursion-max-depth",
                    "initial_value": "12",
                    "type": "unsigned"
                },
                "slp-schedule-budget": {
                    "command": "-slp-schedule-budget",
                    "initial_value": "100000",
                    "type": "int"
                },
                "slp-threshold": {
                    "command": "-slp-threshold",
                    "initial_value": "0",
                    "type": "int"
                },
                "slp-vectorize-hor": {
                    "command": "-slp-vectorize-hor",
                    "initial_value": "true",
                    "type": "bool"
                },
                "slp-vectorize-hor-store": {
                    "command": "-slp-vectorize-hor-store",
                    "initial_value": "false",
                    "type": "bool"
                },
                "view-slp-tree": {
                    "command": "-view-slp-tree",
                    "type": "bool"
                }
            }
        },
        "SROALegacyPass": {
            "command": "-sroa",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                }
            },
            "description": "Scalar Replacement Of Aggregates",
            "name": "SROALegacyPass",
            "parameters": {
                "sroa-random-shuffle-slices": {
                    "command": "-sroa-random-shuffle-slices",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sroa-strict-inbounds": {
                    "command": "-sroa-strict-inbounds",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "SSAUpdater": {
            "command": "-ssaupdater",
            "dependencies": {},
            "description": "",
            "name": "SSAUpdater",
            "parameters": {}
        },
        "SSAUpdaterBulk": {
            "command": "-ssaupdaterbulk",
            "dependencies": {},
            "description": "",
            "name": "SSAUpdaterBulk",
            "parameters": {}
        },
        "SampleProfileLoaderLegacyPass": {
            "command": "-sample-profile",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Sample Profile loader",
            "name": "SampleProfileLoaderLegacyPass",
            "parameters": {
                "no-warn-sample-unused": {
                    "command": "-no-warn-sample-unused",
                    "initial_value": "false",
                    "type": "bool"
                },
                "profile-sample-accurate": {
                    "command": "-profile-sample-accurate",
                    "initial_value": "false",
                    "type": "bool"
                },
                "sample-profile-check-record-coverage": {
                    "command": "-sample-profile-check-record-coverage",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "sample-profile-check-sample-coverage": {
                    "command": "-sample-profile-check-sample-coverage",
                    "initial_value": "0",
                    "type": "unsigned"
                },
                "sample-profile-file": {
                    "command": "-sample-profile-file",
                    "initial_value": "\"\"",
                    "type": "std::string"
                },
                "sample-profile-max-propagate-iterations": {
                    "command": "-sample-profile-max-propagate-iterations",
                    "initial_value": "100",
                    "type": "unsigned"
                },
                "sample-profile-remapping-file": {
                    "command": "-sample-profile-remapping-file",
                    "initial_value": "\"\"",
                    "type": "std::string"
                }
            }
        },
        "ScalarizerLegacyPass": {
            "command": "-scalarizer",
            "dependencies": {},
            "description": "Scalarize vector operations",
            "name": "ScalarizerLegacyPass",
            "parameters": {
                "scalarize-load-store": {
                    "command": "-scalarize-load-store",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "SeparateConstOffsetFromGEP": {
            "command": "-separate-const-offset-from-gep",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Split GEPs to a variadic base and a constant offset for better CSE",
            "name": "SeparateConstOffsetFromGEP",
            "parameters": {
                "disable-separate-const-offset-from-gep": {
                    "command": "-disable-separate-const-offset-from-gep",
                    "initial_value": "false",
                    "type": "bool"
                },
                "reassociate-geps-verify-no-dead-code": {
                    "command": "-reassociate-geps-verify-no-dead-code",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "SimpleInliner": {
            "command": "-inline",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "CallGraphWrapperPass": {
                    "name": "CallGraphWrapperPass"
                },
                "ProfileSummaryInfoWrapperPass": {
                    "name": "ProfileSummaryInfoWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Function Integration/Inlining",
            "name": "SimpleInliner",
            "parameters": {}
        },
        "SimpleLoopUnswitchLegacyPass": {
            "command": "-simple-loop-unswitch",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "LoopPass": {
                    "name": "LoopPass"
                },
                "MemorySSAWrapperPass": {
                    "name": "MemorySSAWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Simple unswitch loops",
            "name": "SimpleLoopUnswitchLegacyPass",
            "parameters": {
                "enable-nontrivial-unswitch": {
                    "command": "-enable-nontrivial-unswitch",
                    "initial_value": "false",
                    "type": "bool"
                },
                "enable-unswitch-cost-multiplier": {
                    "command": "-enable-unswitch-cost-multiplier",
                    "initial_value": "true",
                    "type": "bool"
                },
                "simple-loop-unswitch-guards": {
                    "command": "-simple-loop-unswitch-guards",
                    "initial_value": "true",
                    "type": "bool"
                },
                "unswitch-num-initial-unscaled-candidates": {
                    "command": "-unswitch-num-initial-unscaled-candidates",
                    "initial_value": "8",
                    "type": "int"
                },
                "unswitch-siblings-toplevel-div": {
                    "command": "-unswitch-siblings-toplevel-div",
                    "initial_value": "2",
                    "type": "int"
                },
                "unswitch-threshold": {
                    "command": "-unswitch-threshold",
                    "initial_value": "50",
                    "type": "int"
                }
            }
        },
        "SimplifyCFG": {
            "command": "-simplifycfg",
            "dependencies": {},
            "description": "",
            "name": "SimplifyCFG",
            "parameters": {
                "max-speculation-depth": {
                    "command": "-max-speculation-depth",
                    "initial_value": "10",
                    "type": "unsigned"
                },
                "phi-node-folding-threshold": {
                    "command": "-phi-node-folding-threshold",
                    "initial_value": "2",
                    "type": "unsigned"
                },
                "simplifycfg-dup-ret": {
                    "command": "-simplifycfg-dup-ret",
                    "initial_value": "false",
                    "type": "bool"
                },
                "simplifycfg-hoist-cond-stores": {
                    "command": "-simplifycfg-hoist-cond-stores",
                    "initial_value": "true",
                    "type": "bool"
                },
                "simplifycfg-merge-cond-stores": {
                    "command": "-simplifycfg-merge-cond-stores",
                    "initial_value": "true",
                    "type": "bool"
                },
                "simplifycfg-merge-cond-stores-aggressively": {
                    "command": "-simplifycfg-merge-cond-stores-aggressively",
                    "initial_value": "false",
                    "type": "bool"
                },
                "simplifycfg-sink-common": {
                    "command": "-simplifycfg-sink-common",
                    "initial_value": "true",
                    "type": "bool"
                },
                "speculate-one-expensive-inst": {
                    "command": "-speculate-one-expensive-inst",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "SimplifyIndVar": {
            "command": "-indvars",
            "dependencies": {},
            "description": "",
            "name": "SimplifyIndVar",
            "parameters": {}
        },
        "SinkingLegacyPass": {
            "command": "-sink",
            "dependencies": {
                "AAResultsWrapperPass": {
                    "name": "AAResultsWrapperPass"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                }
            },
            "description": "Code sinking",
            "name": "SinkingLegacyPass",
            "parameters": {}
        },
        "SpeculateAroundPHIs": {
            "command": "-spec-phis",
            "dependencies": {},
            "description": "",
            "name": "SpeculateAroundPHIs",
            "parameters": {}
        },
        "SpeculativeExecutionLegacyPass": {
            "command": "-speculative-execution",
            "dependencies": {
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Speculatively execute instructions",
            "name": "SpeculativeExecutionLegacyPass",
            "parameters": {
                "spec-exec-max-not-hoisted": {
                    "command": "-spec-exec-max-not-hoisted",
                    "initial_value": "5",
                    "type": "unsigned"
                },
                "spec-exec-max-speculation-cost": {
                    "command": "-spec-exec-max-speculation-cost",
                    "initial_value": "7",
                    "type": "unsigned"
                },
                "spec-exec-only-if-divergent-target": {
                    "command": "-spec-exec-only-if-divergent-target",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "SplitModule": {
            "command": "-split-module",
            "dependencies": {},
            "description": "",
            "name": "SplitModule",
            "parameters": {}
        },
        "StraightLineStrengthReduce": {
            "command": "-slsr",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "ScalarEvolutionWrapperPass": {
                    "name": "ScalarEvolutionWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Straight line strength reduction",
            "name": "StraightLineStrengthReduce",
            "parameters": {}
        },
        "StripDeadPrototypesLegacyPass": {
            "command": "-strip-dead-prototypes",
            "dependencies": {},
            "description": "Strip Unused Function Prototypes",
            "name": "StripDeadPrototypesLegacyPass",
            "parameters": {}
        },
        "StripGCRelocates": {
            "command": "-strip-gc-relocates",
            "dependencies": {},
            "description": "Strip gc.relocates inserted through RewriteStatepointsForGC",
            "name": "StripGCRelocates",
            "parameters": {}
        },
        "StripNonLineTableDebugInfo": {
            "command": "-strip-nonlinetable-debuginfo",
            "dependencies": {},
            "description": "Strip all debug info except linetables",
            "name": "StripNonLineTableDebugInfo",
            "parameters": {}
        },
        "StripSymbols": {
            "command": "-strip",
            "dependencies": {},
            "description": "Strip all symbols from a module",
            "name": "StripSymbols",
            "parameters": {}
        },
        "StructurizeCFG": {
            "command": "-structurizecfg",
            "dependencies": {
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "LegacyDivergenceAnalysis": {
                    "name": "LegacyDivergenceAnalysis"
                },
                "LowerSwitch": {
                    "name": "LowerSwitch"
                },
                "RegionInfoPass": {
                    "name": "RegionInfoPass"
                }
            },
            "description": "Structurize the CFG",
            "name": "StructurizeCFG",
            "parameters": {
                "structurizecfg-relaxed-uniform-regions": {
                    "command": "-structurizecfg-relaxed-uniform-regions",
                    "initial_value": "true",
                    "type": "bool"
                },
                "structurizecfg-skip-uniform-regions": {
                    "command": "-structurizecfg-skip-uniform-regions",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "SyntheticCountsPropagation": {
            "command": "-synthetic-counts-propagation",
            "dependencies": {},
            "description": "",
            "name": "SyntheticCountsPropagation",
            "parameters": {
                "cold-synthetic-count": {
                    "command": "-cold-synthetic-count",
                    "initial_value": "5",
                    "type": "int"
                },
                "inline-synthetic-count": {
                    "command": "-inline-synthetic-count",
                    "initial_value": "15",
                    "type": "int"
                }
            }
        },
        "TailCallElim": {
            "command": "-tailcallelim",
            "dependencies": {
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                },
                "TargetTransformInfoWrapperPass": {
                    "name": "TargetTransformInfoWrapperPass"
                }
            },
            "description": "Tail Call Elimination",
            "name": "TailCallElim",
            "parameters": {}
        },
        "ThreadSanitizerLegacyPass": {
            "command": "-tsan",
            "dependencies": {
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "ThreadSanitizer: detects data races.",
            "name": "ThreadSanitizerLegacyPass",
            "parameters": {
                "tsan-handle-cxx-exceptions": {
                    "command": "-tsan-handle-cxx-exceptions",
                    "initial_value": "true",
                    "type": "bool"
                },
                "tsan-instrument-atomics": {
                    "command": "-tsan-instrument-atomics",
                    "initial_value": "true",
                    "type": "bool"
                },
                "tsan-instrument-func-entry-exit": {
                    "command": "-tsan-instrument-func-entry-exit",
                    "initial_value": "true",
                    "type": "bool"
                },
                "tsan-instrument-memintrinsics": {
                    "command": "-tsan-instrument-memintrinsics",
                    "initial_value": "true",
                    "type": "bool"
                },
                "tsan-instrument-memory-accesses": {
                    "command": "-tsan-instrument-memory-accesses",
                    "initial_value": "true",
                    "type": "bool"
                }
            }
        },
        "TruncInstCombine": {
            "command": "-aggressive-instcombine",
            "dependencies": {},
            "description": "",
            "name": "TruncInstCombine",
            "parameters": {}
        },
        "UnifyFunctionExitNodes": {
            "command": "-mergereturn",
            "dependencies": {},
            "description": "Unify function exit nodes",
            "name": "UnifyFunctionExitNodes",
            "parameters": {}
        },
        "VNCoercion": {
            "command": "-vncoerce",
            "dependencies": {},
            "description": "",
            "name": "VNCoercion",
            "parameters": {}
        },
        "VPlan": {
            "command": "-vplan",
            "dependencies": {},
            "description": "",
            "name": "VPlan",
            "parameters": {}
        },
        "VPlanHCFGBuilder": {
            "command": "-loop-vectorize",
            "dependencies": {},
            "description": "",
            "name": "VPlanHCFGBuilder",
            "parameters": {}
        },
        "VPlanPredicator": {
            "command": "-VPlanPredicator",
            "dependencies": {},
            "description": "",
            "name": "VPlanPredicator",
            "parameters": {}
        },
        "VPlanSLP": {
            "command": "-vplan-slp",
            "dependencies": {},
            "description": "",
            "name": "VPlanSLP",
            "parameters": {}
        },
        "VPlanVerifier": {
            "command": "-loop-vectorize",
            "dependencies": {},
            "description": "",
            "name": "VPlanVerifier",
            "parameters": {
                "vplan-verify-hcfg": {
                    "command": "-vplan-verify-hcfg",
                    "initial_value": "false",
                    "type": "bool"
                }
            }
        },
        "WarnMissedTransformationsLegacy": {
            "command": "-transform-warning",
            "dependencies": {
                "LoopInfoWrapperPass": {
                    "name": "LoopInfoWrapperPass"
                },
                "OptimizationRemarkEmitterWrapperPass": {
                    "name": "OptimizationRemarkEmitterWrapperPass"
                }
            },
            "description": "Warn about non-applied transformations",
            "name": "WarnMissedTransformationsLegacy",
            "parameters": {}
        },
        "WholeProgramDevirt": {
            "command": "-wholeprogramdevirt",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "DominatorTreeWrapperPass": {
                    "name": "DominatorTreeWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Whole program devirtualization",
            "name": "WholeProgramDevirt",
            "parameters": {
                "wholeprogramdevirt-branch-funnel-threshold": {
                    "command": "-wholeprogramdevirt-branch-funnel-threshold",
                    "initial_value": "10",
                    "type": "unsigned"
                },
                "wholeprogramdevirt-print-index-based": {
                    "command": "-wholeprogramdevirt-print-index-based",
                    "initial_value": "false",
                    "type": "bool"
                },
                "wholeprogramdevirt-read-summary": {
                    "command": "-wholeprogramdevirt-read-summary",
                    "type": "std::string"
                },
                "wholeprogramdevirt-summary-action": {
                    "command": "-wholeprogramdevirt-summary-action",
                    "type": "PassSummaryAction"
                },
                "wholeprogramdevirt-write-summary": {
                    "command": "-wholeprogramdevirt-write-summary",
                    "type": "std::string"
                }
            }
        },
        "WriteThinLTOBitcode": {
            "command": "-write-thinlto-bitcode",
            "dependencies": {
                "AssumptionCacheTracker": {
                    "name": "AssumptionCacheTracker"
                },
                "ModuleSummaryIndexWrapperPass": {
                    "name": "ModuleSummaryIndexWrapperPass"
                },
                "TargetLibraryInfoWrapperPass": {
                    "name": "TargetLibraryInfoWrapperPass"
                }
            },
            "description": "Write ThinLTO Bitcode",
            "name": "WriteThinLTOBitcode",
            "parameters": {}
        },
        "pass_class": "Transforms"
    }
}